(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng6-o2-chart', ['exports', 'd3', '@angular/core'], factory) :
    (factory((global['ng6-o2-chart'] = {}),null,global.ng.core));
}(this, (function (exports,d3,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ LINE_CHART_TYPE_NAME = 'line';
    var /** @type {?} */ BAR_CHART_TYPE_NAME = 'bar';
    var /** @type {?} */ PIE_CHART_TYPE_NAME = 'pie';
    var /** @type {?} */ SCATTER_PLOT_CHART_TYPE_NAME = 'scatterPlot';
    var /** @type {?} */ HISTOGRAM_CHART_TYPE_NAME = 'histogram';
    var /** @type {?} */ STACK_BAR_CHART_TYPE_NAME = 'stackBar';
    var /** @type {?} */ GEO_MAP_CHART_TYPE_NAME = 'geoMap';
    var /** @type {?} */ GEO_ORTHOGRAPHIC_CHART_TYPE_NAME = 'geoOrthographic';
    var /** @type {?} */ TREE_MAP_CHART_TYPE_NAME = 'treeMap';
    var /** @type {?} */ PACK_LAYOUT_CHART_TYPE_NAME = 'packLayout';
    var /** @type {?} */ CHOROPLETH_CHART_TYPE_NAME = 'choropleth';
    var /** @type {?} */ TREE_CHART_TYPE_NAME = 'tree';
    var /** @type {?} */ SANKEY_CHART_TYPE_NAME = 'sankey';
    var /** @type {?} */ FORCE_CHART_TYPE_NAME = 'force';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var O2Common = (function () {
        function O2Common(svgContainer, configData, autoMaxX, autoMaxY, svgWidth, svgHeight) {
            this.svgContainer = svgContainer;
            this.configData = configData;
            this.autoMaxX = autoMaxX;
            this.autoMaxY = autoMaxY;
            this.svgWidth = svgWidth;
            this.svgHeight = svgHeight;
        }
        Object.defineProperty(O2Common.prototype, "axisClassName", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.className.axis;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "lineClassName", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.className.line;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXBorderLineClassName", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.className.axisXBorder;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "maxXValue", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _maxX = this.autoMaxX;
                if (!this.configData.maxValue.auto) {
                    _maxX = this.configData.maxValue.x;
                }
                return _maxX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "maxYValue", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _maxY = this.autoMaxY;
                if (!this.configData.maxValue.auto) {
                    _maxY = this.configData.maxValue.y;
                }
                return _maxY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphInitXPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _intX = this.configData.margin.left;
                if (this.configData.legend.display && this.configData.legend.position !== 'right') {
                    _intX = this.configData.margin.left
                        + this.configData.legend.totalWidth;
                }
                return _intX;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphInitYPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _intY = this.configData.margin.top
                    + this.configData.title.height;
                return _intY;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphYScale", {
            get: /**
             * @return {?}
             */ function () {
                return this.graphHeight / this.maxYValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphXScale", {
            get: /**
             * @return {?}
             */ function () {
                return this.graphWidth / this.maxXValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphWidth", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _margin = this.configData.margin.left
                    + this.configData.margin.right;
                if (this.configData.legend.display) {
                    _margin += this.configData.legend.totalWidth;
                }
                return this.svgWidth - _margin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphHeight", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _h = this.svgHeight
                    - this.configData.title.height
                    - this.configData.margin.top
                    - this.configData.margin.bottom;
                return _h;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphCenterPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _xyArray = new Array();
                var /** @type {?} */ _x = this.configData.margin.left
                    + this.graphWidth / 2;
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height
                    + this.graphHeight / 2;
                _xyArray.push(_x);
                _xyArray.push(_y);
                return _xyArray;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphCenterTranslatePos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left
                    + this.graphWidth / 2;
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height
                    + this.graphHeight / 2;
                return 'translate(' + String(_x) + ', ' + String(_y) + ')';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "graphInitTranslatePos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.graphInitXPos;
                var /** @type {?} */ _y = this.graphInitYPos;
                return 'translate(' + String(_x) + ', ' + String(_y) + ')';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXLabelInitXPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left
                    + this.configData.axis.xLabel.leftMargin;
                return _x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXLabelInitYPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _y = this.svgHeight
                    - this.configData.axis.xLabel.bottomMargin;
                return _y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisTranslatePos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left;
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height;
                return 'translate(' + String(_x) + ', ' + String(_y) + ')';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXBorderLineWidth", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.axis.borderLineWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisYBorderHeight", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _margin = this.configData.margin.top
                    + this.configData.margin.bottom
                    + this.configData.title.height;
                return this.svgHeight - _margin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXBorderWidth", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _margin = this.configData.margin.left
                    + this.configData.margin.right;
                if (this.configData.legend.display) {
                    _margin += this.configData.legend.totalWidth;
                }
                return this.svgWidth - _margin;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisYOrient", {
            get: /**
             * @return {?}
             */ function () {
                return 'left';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXOrient", {
            get: /**
             * @return {?}
             */ function () {
                return 'bottom';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "axisXBorderTranslatePos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ sYpos = String(this.svgHeight - this.configData.margin.bottom);
                return 'translate(' + this.configData.margin.left + ', ' + sYpos + ')';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "innerRadiusPercent", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.pie.innerRadius.percent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "innerRadiusTitle", {
            get: /**
             * @return {?}
             */ function () {
                return this.configData.pie.innerRadius.title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "innerRadiusTitleTranslatePos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left
                    + this.graphWidth / 2;
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height
                    + this.graphHeight / 2
                    + 5;
                return 'translate(' + String(_x) + ', ' + String(_y) + ')';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "legendInitXPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left
                    + this.graphWidth
                    + this.configData.legend.initXPos;
                if (this.configData.legend.position !== 'right') {
                    _x = this.configData.margin.left
                        + this.configData.legend.initXPos;
                }
                return _x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "legendInitYPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height
                    + this.configData.legend.initYPos;
                return _y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "gridYStep", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _maxY = Math.ceil(this.maxYValue / 100) * 10;
                var /** @type {?} */ _lineNum = 10;
                var /** @type {?} */ _step = Math.ceil(_maxY / _lineNum) * _lineNum;
                return _step;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "gridXStep", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _maxX = Math.ceil(this.maxXValue / 100) * 10;
                var /** @type {?} */ _lineNum = 10;
                var /** @type {?} */ _step = Math.ceil(_maxX / _lineNum) * _lineNum;
                return _step;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "titleInitXPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _x = this.configData.margin.left
                    + (this.graphWidth + this.configData.legend.totalWidth) / 2
                    + this.configData.title.leftMargin;
                return _x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "titleInitYPos", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _y = this.configData.margin.top
                    + this.configData.title.height
                    - this.configData.title.bottomMargin;
                return _y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(O2Common.prototype, "defaultColorFunc", {
            get: /**
             * @return {?}
             */ function () {
                var /** @type {?} */ _color;
                if (this.configData.color.auto) {
                    if (this.configData.color.defaultColorNumber === '20') {
                        _color = d3.scaleOrdinal(d3.schemeCategory20);
                    }
                    else {
                        _color = d3.scaleOrdinal(d3.schemeCategory10);
                    }
                }
                return _color;
            },
            enumerable: true,
            configurable: true
        });
        return O2Common;
    }());
    var O2LegendData = (function () {
        function O2LegendData(title, color) {
            this.title = title;
            this.color = color;
        }
        return O2LegendData;
    }());
    var O2ScatterPlotData = (function () {
        function O2ScatterPlotData(x, y, r) {
            this.x = x;
            this.y = y;
            this.r = r;
        }
        return O2ScatterPlotData;
    }());
    var O2IdValueData = (function () {
        function O2IdValueData(id, value) {
            this.id = id;
            this.value = value;
        }
        return O2IdValueData;
    }());
    // export class O2KeyValueData {
    //     constructor(
    //        public key: string,
    // 	   public value: number
    //        ) { }
    // }
    // export class O2DateKVArrayData {
    //     constructor(
    //        public date: Date,
    // 	   public kvArray: Array<O2KeyValueData>
    //        ) { }
    // }
    // export class O2DateStKVArrayData {
    //     constructor(
    //        public dateSt: string,
    // 	   public kvArray: Array<O2KeyValueData>
    //        ) { }
    // }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Ng6O2ChartComponent = (function () {
        function Ng6O2ChartComponent(elementRef) {
            console.log('el:HTMLElement-------------------');
            var /** @type {?} */ el = elementRef.nativeElement;
            this.root = d3.select(el);
        }
        /**
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var /** @type {?} */ svgWidth = parseInt(this.svgWidth, 10);
                var /** @type {?} */ svgHeight = parseInt(this.svgHeight, 10);
                var /** @type {?} */ dataSet = this.graphData;
                var /** @type {?} */ configData = this.configData;
                var /** @type {?} */ chartType = this.chartType;
                var /** @type {?} */ svgContainer = this.root.append('svg')
                    .attr('width', svgWidth)
                    .attr('height', svgHeight);
                console.log(chartType);
                switch (chartType) {
                    case LINE_CHART_TYPE_NAME:
                        this.buildLine(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case BAR_CHART_TYPE_NAME:
                        this.buildBar(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case PIE_CHART_TYPE_NAME:
                        this.buildPie(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case SCATTER_PLOT_CHART_TYPE_NAME:
                        this.buildScatterPlot(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case HISTOGRAM_CHART_TYPE_NAME:
                        this.buildHistogram(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case STACK_BAR_CHART_TYPE_NAME:
                        this.buildStackBar(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case GEO_MAP_CHART_TYPE_NAME:
                        this.buildGeoMap(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case GEO_ORTHOGRAPHIC_CHART_TYPE_NAME:
                        this.buildGeoOrthographic(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case TREE_CHART_TYPE_NAME:
                        this.buildTree(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case PACK_LAYOUT_CHART_TYPE_NAME:
                        this.buildPackLayout(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case CHOROPLETH_CHART_TYPE_NAME:
                        this.buildChoropleth(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case FORCE_CHART_TYPE_NAME:
                        this.buildForce(svgContainer, configData, dataSet, svgWidth, svgHeight);
                        break;
                    case TREE_MAP_CHART_TYPE_NAME:
                        //  this.buildTreeMap(svgContainer,configData, dataSet,svgWidth,svgHeight );
                        break;
                    case SANKEY_CHART_TYPE_NAME:
                        //  this.buildSankey(svgContainer,configData, dataSet,svgWidth,svgHeight );
                        break;
                    default:
                        break;
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildHistogram = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildHistogram-------------------');
                var /** @type {?} */ dataSet = dataSetJson.data;
                var /** @type {?} */ _binNumber = dataSetJson.bins.length - 1;
                var /** @type {?} */ _maxY = 300; // dummy number
                var /** @type {?} */ _maxX = dataSetJson.range[1];
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _graphWidth = cdt.graphWidth;
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _graphInitX = cdt.graphInitXPos;
                var /** @type {?} */ _graphInitY = cdt.graphInitYPos;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ _gridYDisplay = configData.grid.y.display;
                var /** @type {?} */ _marginLeft = configData.margin.left;
                var /** @type {?} */ _marginTop = configData.margin.top;
                var /** @type {?} */ _className = configData.className.histogramBar;
                var /** @type {?} */ _dataSet = new Array();
                for (var /** @type {?} */ i in dataSet) {
                    if (dataSet.hasOwnProperty(i)) {
                        var /** @type {?} */ _num = dataSet[i] / _maxX;
                        _dataSet.push(_num);
                    }
                }
                var /** @type {?} */ formatCount = d3.format(',.0f');
                var /** @type {?} */ _histgramContainer = svgContainer
                    .append('g')
                    .attr('transform', 'translate(' + _graphInitX + ',' + _graphInitY + ')');
                var /** @type {?} */ _xScale = d3.scaleLinear()
                    .rangeRound([0, _graphWidth]);
                var /** @type {?} */ bins = d3.histogram()
                    .domain([0, 1])
                    .thresholds(_xScale.ticks(_binNumber))(_dataSet);
                var /** @type {?} */ _yScale = d3.scaleLinear()
                    .domain([0, d3.max(bins, function (d) {
                        return d.length;
                    })])
                    .range([_graphHeight, 0]);
                var /** @type {?} */ bar = _histgramContainer
                    .selectAll('.bar')
                    .data(bins)
                    .enter()
                    .append('g')
                    .attr('class', _className)
                    .attr('transform', function (d) {
                    return 'translate(' + _xScale(d.x0) + ',' + _yScale(d.length) + ')';
                });
                if (_animation) {
                    bar.append('rect')
                        .attr('x', 1)
                        .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)
                        .attr('height', 0)
                        .transition()
                        .duration(_animationDuration)
                        .attr('height', function (d) {
                        return _graphHeight - _yScale(d.length);
                    });
                }
                else {
                    bar.append('rect')
                        .attr('x', 1)
                        .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)
                        .attr('height', function (d) {
                        return _graphHeight - _yScale(d.length);
                    });
                }
                bar.append('text')
                    .attr('dy', '.75em')
                    .attr('y', 6)
                    .attr('x', (_xScale(bins[0].x1) - _xScale(bins[0].x0)) / 2)
                    .attr('text-anchor', 'middle')
                    .text(function (d) {
                    return formatCount(d.length);
                });
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                // ------------------------------------
                // ---CALL buildAxis-----------------
                this.buildYAxis(cdt);
                this.buildXAxis(cdt);
                if (_gridYDisplay) {
                    this.drawYGrid(cdt);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildForce = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('In  buildFoce----------------');
                var /** @type {?} */ _maxX = 100;
                var /** @type {?} */ _maxY = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _graphWidth = cdt.graphWidth;
                var /** @type {?} */ _marginLeft = configData.margin.left;
                var /** @type {?} */ _marginTop = configData.margin.top;
                var /** @type {?} */ simulation = d3.forceSimulation()
                    .force('link', d3.forceLink().id(function (d) {
                    return d.id;
                }))
                    .force('charge', d3.forceManyBody())
                    .force('center', d3.forceCenter(_graphWidth / 2, _graphHeight / 2));
                var /** @type {?} */ _forceContainer = svgContainer
                    .append('g')
                    .attr('transform', 'translate(' + _marginLeft + ',' + _marginTop + ')');
                var /** @type {?} */ link = _forceContainer.append('g')
                    .attr('class', 'force-links')
                    .selectAll('line')
                    .data(dataSetJson.links)
                    .enter()
                    .append('line')
                    .attr('stroke-width', function (d) {
                    return Math.sqrt(d.value);
                });
                var /** @type {?} */ node = _forceContainer.append('g')
                    .attr('class', 'nodes')
                    .selectAll('circle')
                    .data(dataSetJson.nodes)
                    .enter()
                    .append('circle')
                    .attr('r', 5)
                    .attr('fill', function (d) {
                    return _color(d.group);
                })
                    .call(d3.drag()
                    .on('start', dragstarted)
                    .on('drag', dragged)
                    .on('end', dragended));
                node.append('title')
                    .text(function (d) {
                    return d.id;
                });
                simulation
                    .nodes(dataSetJson.nodes)
                    .on('tick', ticked);
                var /** @type {?} */ _forceLink = simulation.force('link');
                _forceLink.links(dataSetJson.links);
                /**
                 * @return {?}
                 */
                function ticked() {
                    link
                        .attr('x1', function (d) {
                        return d.source.x;
                    })
                        .attr('y1', function (d) {
                        return d.source.y;
                    })
                        .attr('x2', function (d) {
                        return d.target.x;
                    })
                        .attr('y2', function (d) {
                        return d.target.y;
                    });
                    node
                        .attr('cx', function (d) {
                        return d.x;
                    })
                        .attr('cy', function (d) {
                        return d.y;
                    });
                }
                /**
                 * @param {?} d
                 * @return {?}
                 */
                function dragstarted(d) {
                    if (!d3.event.active) {
                        simulation.alphaTarget(0.3).restart();
                    }
                    d.fx = d.x;
                    d.fy = d.y;
                }
                /**
                 * @param {?} d
                 * @return {?}
                 */
                function dragged(d) {
                    d.fx = d3.event.x;
                    d.fy = d3.event.y;
                }
                /**
                 * @param {?} d
                 * @return {?}
                 */
                function dragended(d) {
                    if (!d3.event.active) {
                        simulation.alphaTarget(0);
                    }
                    d.fx = null;
                    d.fy = null;
                }
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                var /** @type {?} */ _legendDataSet = new Array();
                for (var /** @type {?} */ i in dataSetJson.groups) {
                    if (dataSetJson.groups.hasOwnProperty(i)) {
                        var /** @type {?} */ _id = dataSetJson.groups[i].id;
                        _legendDataSet.push(new O2LegendData(dataSetJson.groups[i].name, _color(_id)));
                    }
                }
                this.buildLegend(cdt, _legendDataSet);
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildChoropleth = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildChoropleth -------------------');
                var /** @type {?} */ _maxX = 100; // any value
                var /** @type {?} */ _maxY = 100; // any value
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _focusColor = configData.color.focusColor;
                var /** @type {?} */ _scale = dataSetJson.map.scale;
                var /** @type {?} */ _targetName = dataSetJson.map.targetName;
                var /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
                var /** @type {?} */ _keyName = 'data.' + _keyDataName;
                var /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
                var /** @type {?} */ _startColor = dataSetJson.map.startColor;
                var /** @type {?} */ _endColor = dataSetJson.map.endColor;
                var /** @type {?} */ _colorNum = dataSetJson.map.colorNumber;
                var /** @type {?} */ _center = dataSetJson.map.center;
                var /** @type {?} */ _targetPropertyName = dataSetJson.map.targetPropertyName;
                var /** @type {?} */ _targetProperty = 'd.' + _targetPropertyName;
                var /** @type {?} */ color = d3.interpolateHsl(_startColor, _endColor);
                var /** @type {?} */ _max = dataSetJson.data[0].value;
                var /** @type {?} */ _min = dataSetJson.data[0].value;
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        if (_max < dataSetJson.data[i].value) {
                            _max = dataSetJson.data[i].value;
                        }
                        if (_min > dataSetJson.data[i].value) {
                            _min = dataSetJson.data[i].value;
                        }
                    }
                }
                var /** @type {?} */ _range = _max - _min;
                var /** @type {?} */ _step = _range / (_colorNum - 1);
                var /** @type {?} */ _findColorById = function (id) {
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            if (id === dataSetJson.data[i].id) {
                                var /** @type {?} */ _value = dataSetJson.data[i].value;
                                var /** @type {?} */ _rate = Math.ceil((_value - _min) / _step);
                                return color(_rate / _max);
                            }
                        }
                    }
                };
                var /** @type {?} */ path = d3.geoPath()
                    .projection(d3.geoMercator()
                    .center(_center)
                    .scale(_scale)
                    .translate(_graphCenterPos));
                d3.json(_geoMapDataUrl, function (error, data) {
                    svgContainer.selectAll('path')
                        .data(eval(_keyName))
                        .enter()
                        .append('path')
                        .attr('d', path)
                        .style('fill', function (d, i) {
                        var /** @type {?} */ _cl = _findColorById(eval(_targetProperty));
                        return _cl;
                    });
                });
                // ------------------------------------
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i = 0; i < _colorNum; i++) {
                        var /** @type {?} */ _label = String(_min + (i * _step)) + ' --';
                        _legendDataSet.push(new O2LegendData(_label, color(i / _max)));
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildPackLayout = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in PackLayout------------------');
                var /** @type {?} */ _packlayoutClass = configData.className.packlayout;
                var /** @type {?} */ _packlayoutLabelClass = configData.className.packlayoutLabel;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ color = d3.scaleOrdinal(d3.schemeCategory10);
                //  const color = d3.scale.category10();
                var /** @type {?} */ bubble = d3.pack()
                    .size([svgWidth, svgHeight]);
                var /** @type {?} */ nodes0 = d3.hierarchy(dataSetJson);
                var /** @type {?} */ pack = svgContainer.selectAll('g')
                    .data(bubble(nodes0).descendants())
                    .enter()
                    .append('g')
                    .attr('transform', function (d, i) {
                    return 'translate(' + d.x + ',' + d.y + ')';
                });
                var /** @type {?} */ _circle = pack.append('circle');
                if (_animation) {
                    _circle.attr('r', 0)
                        .transition()
                        .duration(function (d, i) {
                        return d.depth * _animationDuration + 500;
                    })
                        .attr('r', function (d) {
                        return d.r;
                    })
                        .style('fill', function (d, i) {
                        return color(i);
                    });
                }
                else {
                    _circle.attr('r', function (d) {
                        return d.r;
                    })
                        .style('fill', function (d, i) {
                        return color(i);
                    });
                }
                var /** @type {?} */ _text = pack.append('text')
                    .attr('class', _packlayoutLabelClass)
                    .text(function (d, i) {
                    if (d.depth === 1) {
                        return d.data.name;
                    }
                    return null;
                });
                if (_animation) {
                    _text.style('opacity', 0)
                        .transition()
                        .duration(_animationDuration)
                        .style('opacity', 1.0);
                }
                else {
                    _text.style('opacity', 1.0);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildTree = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('In  buildTree----------------');
                var /** @type {?} */ _maxX = 0;
                var /** @type {?} */ _maxY = 0;
                _maxY = 100;
                _maxX = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _graphWidth = cdt.graphWidth;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ _treemapClass = configData.className.treemap;
                var /** @type {?} */ _treemapLabelClass = configData.className.treemapLabel;
                var /** @type {?} */ _marginLeft = configData.margin.left;
                var /** @type {?} */ _marginTop = configData.margin.top;
                var /** @type {?} */ tree = d3.tree()
                    .size([_graphWidth, _graphHeight]);
                var /** @type {?} */ nodes0 = d3.hierarchy(dataSetJson);
                var /** @type {?} */ nodes = tree(nodes0);
                var /** @type {?} */ _treeContainer = svgContainer
                    .append('g')
                    .attr('transform', 'translate(' + _marginLeft + ',' + _marginTop + ')');
                var /** @type {?} */ link = _treeContainer
                    .selectAll('.link')
                    .data(nodes.descendants().slice(1))
                    .enter()
                    .append('path')
                    .attr('class', 'tree-node-link')
                    .attr('d', function (d) {
                    return 'M' + d.x + ',' + d.y
                        + 'C' + d.x + ',' + (d.y + d.parent.y) / 2
                        + ' ' + d.parent.x + ',' + (d.y + d.parent.y) / 2
                        + ' ' + d.parent.x + ',' + d.parent.y;
                });
                var /** @type {?} */ node = _treeContainer
                    .selectAll('.node')
                    .data(nodes.descendants())
                    .enter()
                    .append('g')
                    .attr('class', function (d) {
                    return 'tree-node' +
                        (d.children ? '-internal' : '-leaf');
                })
                    .attr('transform', function (d) {
                    return 'translate(' + d.x + ',' + d.y + ')';
                });
                node.append('circle')
                    .attr('r', 10);
                node.append('text')
                    .attr('dy', '.35em')
                    .attr('y', function (d) {
                    return d.children ? -20 : 20;
                })
                    .style('text-anchor', 'middle')
                    .text(function (d) {
                    return d.data.name;
                });
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildGeoOrthographic = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildGeoOrthographic -------------------');
                var /** @type {?} */ _maxX = 100; // any value
                var /** @type {?} */ _maxY = 100; // any value
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _focusColor = configData.color.focusColor;
                var /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
                var /** @type {?} */ _scale = dataSetJson.map.scale;
                var /** @type {?} */ _targetName = dataSetJson.map.targetName;
                var /** @type {?} */ _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;
                var /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
                var /** @type {?} */ _keyName = 'data.' + _keyDataName;
                var /** @type {?} */ _clipAngle = dataSetJson.map.clipAngle;
                var /** @type {?} */ _rotateH = dataSetJson.map.rotate.horizontal;
                var /** @type {?} */ _rotateV = dataSetJson.map.rotate.vertical;
                var /** @type {?} */ _oceanColor = dataSetJson.map.oceanColor;
                var /** @type {?} */ _antarcticaColor = dataSetJson.map.antarcticaColor;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ _animationH = 0;
                var /** @type {?} */ _findColorByName = function (name) {
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            if (name === dataSetJson.data[i].name) {
                                var /** @type {?} */ _color = dataSetJson.data[i].color;
                                return _color;
                            }
                        }
                    }
                    return null;
                };
                var /** @type {?} */ targetPath = d3.geoOrthographic()
                    .translate(_graphCenterPos)
                    .clipAngle(_clipAngle)
                    .scale(_scale)
                    .rotate([_rotateH, _rotateV]);
                var /** @type {?} */ path = d3.geoPath()
                    .projection(targetPath);
                d3.json(_geoMapDataUrl, function (error, data) {
                    svgContainer.append('circle')
                        .attr('cx', _graphCenterPos[0])
                        .attr('cy', _graphCenterPos[1])
                        .attr('r', _scale)
                        .style('fill', _oceanColor);
                    var /** @type {?} */ earthPath = svgContainer.selectAll('path')
                        .data(eval(_keyName))
                        .enter()
                        .append('path')
                        .attr('d', path)
                        .style('fill', function (d, i) {
                        var /** @type {?} */ _targetArea = eval(_targetProperty);
                        if (_findColorByName(_targetArea) !== null) {
                            return _findColorByName(_targetArea);
                        }
                        return 'hsl(' + i + ',80%,60%)';
                    });
                    if (_animation) {
                        d3.timer(function () {
                            targetPath.rotate([_rotateH + _animationH, _rotateV]);
                            _animationH += 2;
                            earthPath.attr('d', path);
                        });
                    }
                });
                // ------------------------------------
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            var /** @type {?} */ _name = dataSetJson.data[i].name;
                            var /** @type {?} */ _color = dataSetJson.data[i].color;
                            if (_name === 'Antarctica') {
                                continue;
                            }
                            _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));
                        }
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildGeoMap = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildGeoMap -------------------');
                var /** @type {?} */ _maxX = 100; // any value
                var /** @type {?} */ _maxY = 100; // any value
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
                var /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
                var /** @type {?} */ _scale = dataSetJson.map.scale;
                var /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
                var /** @type {?} */ _keyName = 'data.' + _keyDataName;
                var /** @type {?} */ _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;
                var /** @type {?} */ _antarcticaColor = dataSetJson.map.antarcticaColor;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ path = d3.geoPath()
                    .projection(d3.geoMercator()
                    .translate(_graphCenterPos)
                    .scale(_scale));
                var /** @type {?} */ _findColorByName = function (name) {
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            if (name === dataSetJson.data[i].name) {
                                var /** @type {?} */ _color = dataSetJson.data[i].color;
                                return _color;
                            }
                        }
                    }
                    return null;
                };
                d3.json(_geoMapDataUrl, function (error, data) {
                    svgContainer.selectAll('path')
                        .data(eval(_keyName))
                        .enter()
                        .append('path')
                        .attr('d', path)
                        .style('fill', function (d, i) {
                        var /** @type {?} */ _targetArea = eval(_targetProperty);
                        if (_findColorByName(_targetArea) !== null) {
                            return _findColorByName(_targetArea);
                        }
                        return 'hsl(' + i + ',80%,60%)';
                    });
                });
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            var /** @type {?} */ _name = dataSetJson.data[i].name;
                            var /** @type {?} */ _color = dataSetJson.data[i].color;
                            if (_name === 'Antarctica') {
                                continue;
                            }
                            _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));
                        }
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildStackBar = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildStackBar-------------------');
                var /** @type {?} */ _totalY = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        _totalY.push(0);
                    }
                }
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        var /** @type {?} */ k = 0;
                        for (var /** @type {?} */ j in dataSetJson.data[i].value) {
                            if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                                _totalY[k++] += dataSetJson.data[i].value[j].y;
                            }
                        }
                    }
                }
                var /** @type {?} */ _maxX = 0;
                var /** @type {?} */ _maxY = 0;
                _maxY = d3.max(_totalY);
                _maxX = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _columnNum = dataSetJson.data.length;
                var /** @type {?} */ _barWidth = (cdt.graphWidth / _columnNum) - configData.margin.between;
                var /** @type {?} */ _columnWidth = (cdt.graphWidth / _columnNum);
                var /** @type {?} */ _initPosX = cdt.graphInitXPos;
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _maxYValue = cdt.maxYValue;
                var /** @type {?} */ _opacity = configData.color.opacity;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _gridYDisplay = configData.grid.y.display;
                var /** @type {?} */ _gridXDisplay = configData.grid.x.display;
                var /** @type {?} */ _labelDisplay = configData.label.display;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                //  Get Data Name
                var /** @type {?} */ _seriesDateName = dataSetJson.series[0];
                //  Get Keys
                var /** @type {?} */ _keyArray = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        var /** @type {?} */ _key = dataSetJson.data[i].name;
                        var /** @type {?} */ _value = dataSetJson.data[i].value[0].y;
                        _keyArray.push(_key);
                    }
                }
                //  Get Date String
                var /** @type {?} */ _dateArray = new Array();
                for (var /** @type {?} */ i in dataSetJson.data[0].value) {
                    if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                        var /** @type {?} */ _xValue = dataSetJson.data[0].value[i].x;
                        _dateArray.push(_xValue);
                    }
                }
                var /** @type {?} */ _hashArray = new Array();
                for (var /** @type {?} */ i in _dateArray) {
                    if (_dateArray.hasOwnProperty(i)) {
                        var /** @type {?} */ _hashNumber = {};
                        for (var /** @type {?} */ j in _keyArray) {
                            if (_keyArray.hasOwnProperty(j)) {
                                var /** @type {?} */ _key = _keyArray[j];
                                var /** @type {?} */ _value = dataSetJson.data[j].value[i].y;
                                _hashNumber[_key] = _value;
                            }
                        }
                        _hashArray.push(_hashNumber);
                    }
                }
                var /** @type {?} */ yScale = d3.scaleLinear()
                    .domain([0, _maxYValue])
                    .range([0, _graphHeight]);
                var /** @type {?} */ stack = d3.stack();
                var /** @type {?} */ _rect = svgContainer.selectAll('g')
                    .data(stack.keys(_keyArray)(_hashArray))
                    .enter()
                    .append('g')
                    .attr('fill', function (d, i) {
                    return _color(i);
                })
                    .attr('fill-opacity', _opacity)
                    .selectAll('rect')
                    .data(function (d, i) {
                    return d;
                })
                    .enter()
                    .append('rect');
                if (_animation) {
                    _rect.attr('x', function (d, i) {
                        return _initPosX + i * _columnWidth;
                    })
                        .attr('height', 0)
                        .attr('y', function (d, i) {
                        var /** @type {?} */ nm = 'd.data.' + _keyArray[i];
                        var /** @type {?} */ _yValue = eval(nm);
                        return svgHeight - configData.margin.bottom - yScale(d[1]);
                    })
                        .attr('width', _barWidth)
                        .transition()
                        .duration(_animationDuration)
                        .attr('height', function (d, i) {
                        return yScale(d[1] - d[0]);
                    });
                }
                else {
                    _rect.attr('x', function (d, i) {
                        return _initPosX + (i * _columnWidth);
                    })
                        .attr('y', function (d, i) {
                        var /** @type {?} */ nm = 'd.data.' + _keyArray[i];
                        var /** @type {?} */ _yValue = eval(nm);
                        return svgHeight - configData.margin.bottom - yScale(d[1]);
                    })
                        .attr('width', _barWidth)
                        .attr('height', function (d, i) {
                        return yScale(d[1] - d[0]);
                    });
                }
                // ------------------------------------
                // ---CALL buildTitle-----------------
                this.drawTitle(cdt);
                // ------------------------------------
                // ---CALL buildAxis-----------------
                this.buildYAxis(cdt);
                this.drawXBaseLine(cdt);
                //  ------------------------------------
                //  ---CALL drawXAxisLabel-----------------
                if (_labelDisplay) {
                    var /** @type {?} */ _labelArray = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data[0].value) {
                        if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                            _labelArray.push(dataSetJson.data[0].value[i].x);
                        }
                    }
                    this.drawXAxisLabel(cdt, _labelArray, STACK_BAR_CHART_TYPE_NAME);
                }
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
                        }
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
                if (_gridYDisplay) {
                    this.drawYGrid(cdt);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildScatterPlot = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('In  buildScatterPlot----------------');
                var /** @type {?} */ _dataSet = new Array();
                var /** @type {?} */ _maxX = 0;
                var /** @type {?} */ _maxY = 0;
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        for (var /** @type {?} */ j in dataSetJson.data[i].value) {
                            if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                                if (_maxX < dataSetJson.data[i].value[j].x) {
                                    _maxX = dataSetJson.data[i].value[j].x;
                                }
                                if (_maxY < dataSetJson.data[i].value[j].y) {
                                    _maxY = dataSetJson.data[i].value[j].y;
                                }
                                var /** @type {?} */ _scatterPlotData = new O2ScatterPlotData(dataSetJson.data[i].value[j].x, dataSetJson.data[i].value[j].y, dataSetJson.data[i].value[j].r);
                                _dataSet.push(_scatterPlotData);
                            }
                        }
                    }
                }
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _initPosX = cdt.graphInitXPos;
                var /** @type {?} */ _seriesNumber = dataSetJson.series.length;
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _opacity = configData.color.opacity;
                var /** @type {?} */ _gridYDisplay = configData.grid.y.display;
                var /** @type {?} */ _gridXDisplay = configData.grid.x.display;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _circle = svgContainer.selectAll('circle')
                    .data(_dataSet)
                    .enter()
                    .append('circle')
                    .attr('cx', function (d, i) {
                    return _initPosX + d.x;
                })
                    .attr('cy', function (d, i) {
                    return (svgHeight - configData.margin.bottom - d.y);
                })
                    .attr('r', function (d, i) {
                    return d.r;
                })
                    .style('fill', function (d, i) {
                    var /** @type {?} */ _colorNum = i % _seriesNumber;
                    return _color(_colorNum);
                })
                    .attr('fill-opacity', _opacity);
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                // ------------------------------------
                // ---CALL buildLegend-----------------
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i = 0; i < dataSetJson.series.length; i++) {
                        _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
                // ------------------------------------
                // ---CALL buildAxis-----------------
                this.buildYAxis(cdt);
                this.buildXAxis(cdt);
                if (_gridYDisplay) {
                    this.drawYGrid(cdt);
                }
                if (_gridXDisplay) {
                    this.drawXGrid(cdt);
                }
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawXGrid = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in buildXGrid-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _stepX = cdt.gridXStep;
                var /** @type {?} */ _maxX = cdt.maxXValue;
                var /** @type {?} */ _graphYScale = cdt.graphYScale;
                var /** @type {?} */ _graphXScale = cdt.graphXScale;
                var /** @type {?} */ _graphWidth = cdt.graphWidth;
                var /** @type {?} */ _gridClassName = configData.className.grid;
                var /** @type {?} */ _axisXScale = d3.scaleLinear()
                    .domain([0, _maxX])
                    .range([0, _maxX * _graphXScale]);
                var /** @type {?} */ _rangeX = d3.range(_stepX * _graphXScale, _maxX * _graphXScale, _stepX * _graphXScale);
                svgContainer.append('g')
                    .selectAll('line.x')
                    .data(_rangeX)
                    .enter()
                    .append('line')
                    .attr('class', _gridClassName)
                    .attr('x1', function (d, i) {
                    var /** @type {?} */ _x1 = configData.margin.left + d;
                    return _x1;
                })
                    .attr('y1', cdt.svgHeight - configData.margin.bottom)
                    .attr('x2', function (d, i) {
                    var /** @type {?} */ _x2 = configData.margin.left + d;
                    return _x2;
                })
                    .attr('y2', configData.margin.top + configData.title.height);
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildXAxis = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in buildXAxis-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _maxX = cdt.maxXValue;
                var /** @type {?} */ _graphXScale = cdt.graphXScale;
                var /** @type {?} */ _axisXScale = d3.scaleLinear()
                    .domain([0, _maxX])
                    .range([0, _maxX * _graphXScale]);
                svgContainer.append('g')
                    .attr('class', cdt.axisClassName)
                    .attr('transform', cdt.axisXBorderTranslatePos)
                    .call(d3.axisBottom(_axisXScale));
                //  .scale()
                //  .orient(cdt.axisXOrient)
                //  );
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildPie = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('In  buildPie----------------');
                var /** @type {?} */ _maxX = 100;
                var /** @type {?} */ _maxY = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _opacity = configData.color.opacity;
                var /** @type {?} */ _titleHeight = configData.title.height;
                var /** @type {?} */ _leftMargin = configData.margin.left;
                var /** @type {?} */ _topMargin = configData.margin.top;
                var /** @type {?} */ _bottomMargin = configData.margin.bottom;
                var /** @type {?} */ _betweenMargin = configData.margin.between;
                var /** @type {?} */ _innerRadiusPercent = cdt.innerRadiusPercent;
                var /** @type {?} */ _graphCenterTranslatePos = cdt.graphCenterTranslatePos;
                var /** @type {?} */ _pieClassName = configData.className.pie;
                var /** @type {?} */ _pieValueClassName = configData.className.pieNum;
                var /** @type {?} */ _pieInnerTitleClassName = configData.className.pieInnerTitle;
                var /** @type {?} */ _innerRadiusTitleTranslatePos = cdt.innerRadiusTitleTranslatePos;
                var /** @type {?} */ _innerRadiusTitle = cdt.innerRadiusTitle;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _labelDisplay = configData.label.display;
                var /** @type {?} */ _valueDisplay = configData.pie.value.display;
                var /** @type {?} */ _percentDisplay = configData.pie.percent.display;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ dataSet = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        var /** @type {?} */ _num = dataSetJson.data[i].value;
                        dataSet.push(_num);
                    }
                }
                var /** @type {?} */ _sum = d3.sum(dataSet);
                var /** @type {?} */ pie = d3.pie();
                var /** @type {?} */ arc = d3.arc()
                    .innerRadius(_graphHeight * _innerRadiusPercent / 100)
                    .outerRadius(_graphHeight / 2);
                var /** @type {?} */ pieElements = svgContainer.selectAll('path')
                    .data(pie(dataSet))
                    .enter()
                    .append('g')
                    .attr('transform', _graphCenterTranslatePos);
                var /** @type {?} */ _makeCenterTitle = function () {
                    if (_valueDisplay && _percentDisplay) {
                        var /** @type {?} */ _st = _innerRadiusTitle + ':' + _sum + ' (100%)';
                        return _st;
                    }
                    if (_percentDisplay) {
                        return '100%';
                    }
                    if (_valueDisplay) {
                        return _innerRadiusTitle + ':' + _sum;
                    }
                };
                var /** @type {?} */ textElements = svgContainer.append('text')
                    .attr('class', _pieInnerTitleClassName)
                    .attr('transform', _innerRadiusTitleTranslatePos)
                    .text(_makeCenterTitle);
                var /** @type {?} */ _arc = pieElements.append('path')
                    .attr('class', _pieClassName)
                    .style('fill', function (d, i) {
                    return _color(i);
                })
                    .attr('fill-opacity', _opacity);
                //  For d3Version4 animation is not available now
                //  if (_animation) {
                //      _arc.transition()
                //      .duration(_animationDuration)
                //      .delay((d,i)=> {
                //          return i *1000;
                //      })
                //      .attrTween('d',(d: any,i: number) =>  {
                //          const _interpolate = d3.interpolateObject(
                //              { startAngle:d.startAngle,endAngle:d.startAngle }
                //              { startAngle:d.startAngle,endAngle:d.endAngle }
                //          )
                //          return (t) {
                //              return arc(_interpolate(t));
                //          }
                //      })
                //  }
                //  else{
                //      _arc.attr('d',arc);
                //  }
                _arc.attr('d', arc);
                pieElements.append('text')
                    .attr('class', _pieValueClassName)
                    .attr('transform', function (d, i) {
                    return 'translate(' + arc.centroid(d) + ')';
                })
                    .text(function (d, i) {
                    if (_valueDisplay && _percentDisplay) {
                        var /** @type {?} */ _percentSt = String(Math.ceil(d.value / _sum * 100));
                        var /** @type {?} */ _st = String(d.value) + ' (' + _percentSt + '%)';
                        return _st;
                    }
                    if (_percentDisplay) {
                        var /** @type {?} */ _percentSt = String(Math.ceil(d.value / _sum * 100));
                        var /** @type {?} */ _st = _percentSt + '%';
                        return _st;
                    }
                    if (_valueDisplay) {
                        return d.value;
                    }
                });
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                // ------------------------------------
                // ---CALL buildLegend-----------------
                if (_legendDisplay) {
                    var /** @type {?} */ _legendDataSet = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
                        }
                    }
                    this.buildLegend(cdt, _legendDataSet);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildBar = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('In  buildBar----------------');
                var /** @type {?} */ _yDataSet = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        for (var /** @type {?} */ j in dataSetJson.data[i].y) {
                            if (dataSetJson.data[i].y.hasOwnProperty(j)) {
                                var /** @type {?} */ _y = dataSetJson.data[i].y[j];
                                _yDataSet.push(_y);
                            }
                        }
                    }
                }
                var /** @type {?} */ _maxX = 0;
                var /** @type {?} */ _maxY = 0;
                _maxY = d3.max(_yDataSet);
                _maxX = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _barValueClass = configData.className.barValue;
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _seriesNum = dataSetJson.series.length;
                var /** @type {?} */ _columnNum = _yDataSet.length;
                var /** @type {?} */ _initPosY = cdt.graphInitYPos;
                var /** @type {?} */ _graphHeight = cdt.graphHeight;
                var /** @type {?} */ _graphWidth = cdt.graphWidth;
                var /** @type {?} */ _opacity = configData.color.opacity;
                var /** @type {?} */ _titleHeight = configData.title.height;
                var /** @type {?} */ _titleDisplay = configData.title.display;
                var /** @type {?} */ _leftMargin = configData.margin.left;
                var /** @type {?} */ _topMargin = configData.margin.top;
                var /** @type {?} */ _bottomMargin = configData.margin.bottom;
                var /** @type {?} */ _betweenMargin = configData.margin.between;
                var /** @type {?} */ _legendDisplay = configData.legend.display;
                var /** @type {?} */ _labelDisplay = configData.label.display;
                var /** @type {?} */ _gridYDisplay = configData.grid.y.display;
                var /** @type {?} */ _animation = configData.animation.enable;
                var /** @type {?} */ _animationDuration = configData.animation.duration;
                var /** @type {?} */ _barWidth = (_graphWidth - (_betweenMargin * _columnNum / _seriesNum)) / _columnNum;
                var /** @type {?} */ _columnWidth = (_graphWidth / _columnNum);
                var /** @type {?} */ _graphYScale = cdt.graphYScale;
                var /** @type {?} */ yBarScale = d3.scaleLinear()
                    .domain([0, _maxY])
                    .range([_maxY * _graphYScale, 0]);
                var /** @type {?} */ _barPadding = _betweenMargin;
                var /** @type {?} */ grpGraph = svgContainer.selectAll('g')
                    .data(_yDataSet)
                    .enter()
                    .append('g')
                    .attr('transform', function (d, i) {
                    var /** @type {?} */ _padding = ((i % _seriesNum) === 0) ? _barPadding : 0;
                    return 'translate(' + (_padding + _columnWidth * i) + ')';
                })
                    .style('fill', function (d, i) {
                    var /** @type {?} */ _remnant = (i % _seriesNum);
                    return _color(_remnant);
                })
                    .attr('fill-opacity', _opacity);
                var /** @type {?} */ _rect = grpGraph.append('rect');
                if (_animation) {
                    _rect.attr('x', _leftMargin)
                        .attr('height', 0)
                        .attr('y', function (d) {
                        return _initPosY;
                    })
                        .attr('width', _barWidth - _barPadding)
                        .transition()
                        .duration(_animationDuration)
                        .attr('y', function (d) {
                        return yBarScale(d) + _initPosY;
                    })
                        .attr('height', function (d) {
                        return _graphHeight - yBarScale(d);
                    });
                }
                else {
                    _rect.attr('x', _leftMargin)
                        .attr('y', function (d) {
                        return yBarScale(d) + _initPosY;
                    })
                        .attr('width', _barWidth - _barPadding)
                        .attr('height', function (d) {
                        return _graphHeight - yBarScale(d);
                    });
                }
                var /** @type {?} */ textBarValue = grpGraph.append('text');
                textBarValue
                    .attr('class', _barValueClass)
                    .attr('x', _leftMargin)
                    .attr('y', function (d) {
                    return yBarScale(d) + _initPosY;
                })
                    .text(function (d) {
                    return d;
                });
                // ------------------------------------
                // ---CALL buildAxis-----------------
                this.buildYAxis(cdt);
                //  ------------------------------------
                //  ---CALL drawXAxisLabel-----------------
                if (_labelDisplay) {
                    var /** @type {?} */ _labelArray = new Array();
                    for (var /** @type {?} */ i in dataSetJson.data) {
                        if (dataSetJson.data.hasOwnProperty(i)) {
                            _labelArray.push(dataSetJson.data[i].x);
                        }
                    }
                    this.drawXAxisLabel(cdt, _labelArray, BAR_CHART_TYPE_NAME);
                }
                this.drawXBaseLine(cdt);
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                var /** @type {?} */ _legendDataSet = new Array();
                for (var /** @type {?} */ i in dataSetJson.series) {
                    if (dataSetJson.series.hasOwnProperty(i)) {
                        _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));
                    }
                }
                this.buildLegend(cdt, _legendDataSet);
                // ------------------------------------
                // ---CALL buildTitle-----------------
                if (_titleDisplay) {
                    this.drawTitle(cdt);
                }
                if (_gridYDisplay) {
                    this.drawYGrid(cdt);
                }
            };
        /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildLine = /**
         * @param {?} svgContainer
         * @param {?} configData
         * @param {?} dataSetJson
         * @param {?} svgWidth
         * @param {?} svgHeight
         * @return {?}
         */
            function (svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
                console.log('in buildTest-------------------');
                var /** @type {?} */ _groupMaxY = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        var /** @type {?} */ _gMaxY = 0;
                        for (var /** @type {?} */ j in dataSetJson.data[i].value) {
                            if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                                if (_gMaxY < dataSetJson.data[i].value[j].y) {
                                    _gMaxY = dataSetJson.data[i].value[j].y;
                                }
                            }
                        }
                        _groupMaxY.push(_gMaxY);
                    }
                }
                var /** @type {?} */ _maxX = 0;
                var /** @type {?} */ _maxY = 0;
                _maxY = d3.max(_groupMaxY);
                _maxX = 100;
                var /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
                var /** @type {?} */ _color = cdt.defaultColorFunc;
                var /** @type {?} */ _columnNum = dataSetJson.data[0].value.length;
                var /** @type {?} */ _columnWidth = cdt.graphWidth / _columnNum;
                console.log(_columnWidth);
                if (configData.grid.y.display) {
                    this.drawYGrid(cdt);
                }
                //  O2IdValueData
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        var /** @type {?} */ _lineArray = new Array();
                        for (var /** @type {?} */ j in dataSetJson.data[i].value) {
                            if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                                var /** @type {?} */ idValue = new O2IdValueData(parseInt(j, 10), dataSetJson.data[i].value[j].y);
                                _lineArray.push(idValue);
                            }
                        }
                        var /** @type {?} */ num = parseInt(i, 10);
                        this.drawSingleLine(cdt, _lineArray, num);
                    }
                }
                // ------------------------------------
                // ---CALL buildTitle-----------------
                this.drawTitle(cdt);
                // ------------------------------------
                // ---CALL buildAxis-----------------
                this.buildYAxis(cdt);
                this.drawXBaseLine(cdt);
                //  ------------------------------------
                //  ---CALL drawXAxisLabel-----------------
                var /** @type {?} */ _labelArray = new Array();
                for (var /** @type {?} */ i in dataSetJson.data[0].value) {
                    if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                        _labelArray.push(dataSetJson.data[0].value[i].x);
                    }
                }
                this.drawXAxisLabel(cdt, _labelArray, LINE_CHART_TYPE_NAME);
                //  ------------------------------------
                //  ---CALL buildLegend-----------------
                var /** @type {?} */ _legendDataSet = new Array();
                for (var /** @type {?} */ i in dataSetJson.data) {
                    if (dataSetJson.data.hasOwnProperty(i)) {
                        _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
                    }
                }
                this.buildLegend(cdt, _legendDataSet);
            };
        /**
         * @param {?} o2Common
         * @param {?} dataSet
         * @param {?} lineNum
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawSingleLine = /**
         * @param {?} o2Common
         * @param {?} dataSet
         * @param {?} lineNum
         * @return {?}
         */
            function (o2Common, dataSet, lineNum) {
                console.log('in drawSingleLine-------------------');
                console.log(dataSet);
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _maxX = cdt.maxXValue;
                var /** @type {?} */ _initXPos = cdt.axisXLabelInitXPos;
                var /** @type {?} */ _initYPos = cdt.axisXLabelInitYPos;
                var /** @type {?} */ _columnNum = dataSet.length;
                var /** @type {?} */ _columnWidth = cdt.graphWidth / (_columnNum - 1);
                var /** @type {?} */ _color = d3.scaleOrdinal(d3.schemeCategory10);
                var /** @type {?} */ _lineClassName = configData.className.multiLinePrefix + String(lineNum);
                var /** @type {?} */ _leftMargin = configData.margin.left;
                var /** @type {?} */ _bottomMargin = configData.margin.bottom;
                var /** @type {?} */ _yScale = cdt.graphYScale;
                var /** @type {?} */ line = d3.line()
                    .curve(d3.curveLinear)
                    .x(function (d) {
                    return _leftMargin + d.id * _columnWidth;
                })
                    .y(function (d) {
                    return cdt.svgHeight - _bottomMargin - (d.value * _yScale);
                });
                svgContainer.append('path')
                    .attr('class', _lineClassName)
                    .attr('d', line(dataSet));
                //  .attr('transform', cdt.axisTranslatePos)
            };
        /**
         * @param {?} o2Common
         * @param {?} _legendDataSet
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildLegend = /**
         * @param {?} o2Common
         * @param {?} _legendDataSet
         * @return {?}
         */
            function (o2Common, _legendDataSet) {
                console.log('in buildLegend-------------------');
                //  maxValues are meaningless
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                //  const cdt = new O2Common(configData, 100, 100, svgWidth, svgHeight);
                var /** @type {?} */ legendRectSize = configData.legend.rectWidth;
                var /** @type {?} */ legendSpacing = 10;
                var /** @type {?} */ ySpacing = configData.legend.ySpacing;
                var /** @type {?} */ initPosX = cdt.legendInitXPos;
                var /** @type {?} */ initPosY = cdt.legendInitYPos;
                var /** @type {?} */ opacity = configData.color.opacity;
                var /** @type {?} */ grpLegend = svgContainer.append('g')
                    .selectAll('g')
                    .data(_legendDataSet)
                    .enter()
                    .append('g')
                    .attr('class', 'legend')
                    .attr('transform', function (d, i) {
                    var /** @type {?} */ height = legendRectSize + ySpacing;
                    var /** @type {?} */ x = initPosX;
                    var /** @type {?} */ y = i * height + initPosY;
                    return 'translate(' + x + ', ' + y + ')';
                });
                grpLegend.append('rect')
                    .attr('width', legendRectSize)
                    .attr('height', legendRectSize)
                    .style('fill', function (d) {
                    return d.color;
                })
                    .style('stroke', function (d) {
                    return d.color;
                })
                    .attr('fill-opacity', opacity);
                grpLegend.append('text')
                    .attr('x', legendRectSize + legendSpacing)
                    .attr('y', legendRectSize)
                    .text(function (d) {
                    return d.title;
                });
            };
        /**
         * @param {?} o2Common
         * @param {?} labelDataSet
         * @param {?} chartType
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawXAxisLabel = /**
         * @param {?} o2Common
         * @param {?} labelDataSet
         * @param {?} chartType
         * @return {?}
         */
            function (o2Common, labelDataSet, chartType) {
                console.log('in drawXAxisLabel-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                // const _maxX = cdt.maxXValue;
                var /** @type {?} */ _initXPos = cdt.axisXLabelInitXPos;
                var /** @type {?} */ _initYPos = cdt.axisXLabelInitYPos;
                var /** @type {?} */ _columnNum = labelDataSet.length;
                var /** @type {?} */ _columnWidth = cdt.graphWidth / _columnNum;
                if (chartType === LINE_CHART_TYPE_NAME) {
                    _columnWidth = cdt.graphWidth / (_columnNum - 1);
                }
                var /** @type {?} */ grpLabel = svgContainer.append('g')
                    .selectAll('g')
                    .data(labelDataSet)
                    .enter()
                    .append('g')
                    .attr('class', configData.axisXText)
                    .attr('transform', function (d, i) {
                    var /** @type {?} */ _x = _initXPos + _columnWidth * i;
                    var /** @type {?} */ _y = _initYPos;
                    return 'translate(' + _x + ', ' + _y + ')';
                });
                grpLabel.append('text')
                    .attr('class', configData.className.axisXText)
                    .text(function (d, i) {
                    return d;
                });
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawXBaseLine = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in drawXBaseLine-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                svgContainer.append('rect')
                    .attr('class', cdt.axisXBorderLineClassName)
                    .attr('width', cdt.axisXBorderWidth)
                    .attr('height', cdt.axisXBorderLineWidth)
                    .attr('transform', cdt.axisXBorderTranslatePos);
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.buildYAxis = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in buildYAxis-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _maxY = cdt.maxYValue;
                var /** @type {?} */ _graphYScale = cdt.graphYScale;
                var /** @type {?} */ _axisYScale = d3.scaleLinear()
                    .domain([0, _maxY])
                    .range([_maxY * _graphYScale, 0]);
                svgContainer.append('g')
                    .attr('class', cdt.axisClassName)
                    .attr('transform', cdt.axisTranslatePos)
                    .call(d3.axisLeft(_axisYScale));
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawTitle = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in drawTitle-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _title = configData.title.name;
                var /** @type {?} */ _xPos = cdt.titleInitXPos;
                var /** @type {?} */ _yPos = cdt.titleInitYPos;
                var /** @type {?} */ _titleClassName = configData.title.className;
                svgContainer.append('text')
                    .attr('class', _titleClassName)
                    .attr('x', _xPos)
                    .attr('y', _yPos)
                    .text(_title);
            };
        /**
         * @param {?} o2Common
         * @return {?}
         */
        Ng6O2ChartComponent.prototype.drawYGrid = /**
         * @param {?} o2Common
         * @return {?}
         */
            function (o2Common) {
                console.log('in buildYGrid-------------------');
                var /** @type {?} */ cdt = o2Common;
                var /** @type {?} */ configData = cdt.configData;
                var /** @type {?} */ svgContainer = cdt.svgContainer;
                var /** @type {?} */ _stepY = cdt.gridYStep;
                var /** @type {?} */ _maxY = cdt.maxYValue;
                var /** @type {?} */ _graphYScale = cdt.graphYScale;
                var /** @type {?} */ _gridClassName = configData.className.grid;
                var /** @type {?} */ _rangeY = d3.range(_stepY * _graphYScale, _maxY * _graphYScale, _stepY * _graphYScale);
                svgContainer.append('g')
                    .selectAll('line.y')
                    .data(_rangeY)
                    .enter()
                    .append('line')
                    .attr('class', _gridClassName)
                    .attr('x1', configData.margin.left)
                    .attr('y1', function (d, i) {
                    var /** @type {?} */ _y1 = cdt.svgHeight - configData.margin.bottom - d;
                    return _y1;
                })
                    .attr('x2', configData.margin.left + cdt.axisXBorderWidth)
                    .attr('y2', function (d, i) {
                    var /** @type {?} */ _y1 = cdt.svgHeight - configData.margin.bottom - d;
                    return _y1;
                });
            };
        Ng6O2ChartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-Ng6O2Chart',
                        template: "",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        Ng6O2ChartComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        Ng6O2ChartComponent.propDecorators = {
            chartType: [{ type: core.Input }],
            svgWidth: [{ type: core.Input }],
            svgHeight: [{ type: core.Input }],
            graphData: [{ type: core.Input }],
            configData: [{ type: core.Input }]
        };
        return Ng6O2ChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Ng6O2ChartModule = (function () {
        function Ng6O2ChartModule() {
        }
        Ng6O2ChartModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [Ng6O2ChartComponent],
                        exports: [Ng6O2ChartComponent]
                    },] },
        ];
        return Ng6O2ChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.LINE_CHART_TYPE_NAME = LINE_CHART_TYPE_NAME;
    exports.BAR_CHART_TYPE_NAME = BAR_CHART_TYPE_NAME;
    exports.PIE_CHART_TYPE_NAME = PIE_CHART_TYPE_NAME;
    exports.SCATTER_PLOT_CHART_TYPE_NAME = SCATTER_PLOT_CHART_TYPE_NAME;
    exports.HISTOGRAM_CHART_TYPE_NAME = HISTOGRAM_CHART_TYPE_NAME;
    exports.STACK_BAR_CHART_TYPE_NAME = STACK_BAR_CHART_TYPE_NAME;
    exports.GEO_MAP_CHART_TYPE_NAME = GEO_MAP_CHART_TYPE_NAME;
    exports.GEO_ORTHOGRAPHIC_CHART_TYPE_NAME = GEO_ORTHOGRAPHIC_CHART_TYPE_NAME;
    exports.TREE_MAP_CHART_TYPE_NAME = TREE_MAP_CHART_TYPE_NAME;
    exports.PACK_LAYOUT_CHART_TYPE_NAME = PACK_LAYOUT_CHART_TYPE_NAME;
    exports.CHOROPLETH_CHART_TYPE_NAME = CHOROPLETH_CHART_TYPE_NAME;
    exports.TREE_CHART_TYPE_NAME = TREE_CHART_TYPE_NAME;
    exports.SANKEY_CHART_TYPE_NAME = SANKEY_CHART_TYPE_NAME;
    exports.FORCE_CHART_TYPE_NAME = FORCE_CHART_TYPE_NAME;
    exports.Ng6O2ChartComponent = Ng6O2ChartComponent;
    exports.Ng6O2ChartModule = Ng6O2ChartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,