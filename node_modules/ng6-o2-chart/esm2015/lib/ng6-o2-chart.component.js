/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input, ElementRef } from '@angular/core';
import { O2Common, O2LegendData, O2ScatterPlotData, O2IdValueData } from './shared/o2common';
import * as ChartConst from './shared/chart-const';
import * as d3 from 'd3';
export class Ng6O2ChartComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        console.log('el:HTMLElement-------------------');
        const /** @type {?} */ el = elementRef.nativeElement;
        this.root = d3.select(el);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ svgWidth = parseInt(this.svgWidth, 10);
        const /** @type {?} */ svgHeight = parseInt(this.svgHeight, 10);
        const /** @type {?} */ dataSet = this.graphData;
        const /** @type {?} */ configData = this.configData;
        const /** @type {?} */ chartType = this.chartType;
        const /** @type {?} */ svgContainer = this.root.append('svg')
            .attr('width', svgWidth)
            .attr('height', svgHeight);
        console.log(chartType);
        switch (chartType) {
            case ChartConst.LINE_CHART_TYPE_NAME:
                this.buildLine(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.BAR_CHART_TYPE_NAME:
                this.buildBar(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.PIE_CHART_TYPE_NAME:
                this.buildPie(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.SCATTER_PLOT_CHART_TYPE_NAME:
                this.buildScatterPlot(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.HISTOGRAM_CHART_TYPE_NAME:
                this.buildHistogram(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.STACK_BAR_CHART_TYPE_NAME:
                this.buildStackBar(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.GEO_MAP_CHART_TYPE_NAME:
                this.buildGeoMap(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.GEO_ORTHOGRAPHIC_CHART_TYPE_NAME:
                this.buildGeoOrthographic(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.TREE_CHART_TYPE_NAME:
                this.buildTree(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.PACK_LAYOUT_CHART_TYPE_NAME:
                this.buildPackLayout(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.CHOROPLETH_CHART_TYPE_NAME:
                this.buildChoropleth(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.FORCE_CHART_TYPE_NAME:
                this.buildForce(svgContainer, configData, dataSet, svgWidth, svgHeight);
                break;
            case ChartConst.TREE_MAP_CHART_TYPE_NAME:
                //  this.buildTreeMap(svgContainer,configData, dataSet,svgWidth,svgHeight );
                break;
            case ChartConst.SANKEY_CHART_TYPE_NAME:
                //  this.buildSankey(svgContainer,configData, dataSet,svgWidth,svgHeight );
                break;
            default:
                break;
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildHistogram(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildHistogram-------------------');
        const /** @type {?} */ dataSet = dataSetJson.data;
        const /** @type {?} */ _binNumber = dataSetJson.bins.length - 1;
        const /** @type {?} */ _maxY = 300; // dummy number
        const /** @type {?} */ _maxX = dataSetJson.range[1];
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _maxYValue = cdt.maxYValue;
        const /** @type {?} */ _graphXScale = cdt.graphXScale;
        const /** @type {?} */ _graphInitX = cdt.graphInitXPos;
        const /** @type {?} */ _graphInitY = cdt.graphInitYPos;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        const /** @type {?} */ _gridYDisplay = configData.grid.y.display;
        const /** @type {?} */ _marginLeft = configData.margin.left;
        const /** @type {?} */ _marginTop = configData.margin.top;
        const /** @type {?} */ _className = configData.className.histogramBar;
        const /** @type {?} */ _dataSet = new Array();
        for (const /** @type {?} */ i in dataSet) {
            if (dataSet.hasOwnProperty(i)) {
                const /** @type {?} */ _num = dataSet[i] / _maxX;
                _dataSet.push(_num);
            }
        }
        const /** @type {?} */ formatCount = d3.format(',.0f');
        const /** @type {?} */ _histgramContainer = svgContainer
            .append('g')
            .attr('transform', 'translate(' + _graphInitX + ',' + _graphInitY + ')');
        const /** @type {?} */ _xScale = d3.scaleLinear()
            .rangeRound([0, _graphWidth]);
        const /** @type {?} */ bins = d3.histogram()
            .domain([0, 1])
            .thresholds(_xScale.ticks(_binNumber))(_dataSet);
        const /** @type {?} */ _yScale = d3.scaleLinear()
            .domain([0, d3.max(bins, (d) => {
                return d.length;
            })])
            .range([_graphHeight, 0]);
        const /** @type {?} */ bar = _histgramContainer
            .selectAll('.bar')
            .data(bins)
            .enter()
            .append('g')
            .attr('class', _className)
            .attr('transform', (d) => {
            return 'translate(' + _xScale(d.x0) + ',' + _yScale(d.length) + ')';
        });
        if (_animation) {
            bar.append('rect')
                .attr('x', 1)
                .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)
                .attr('height', 0)
                .transition()
                .duration(_animationDuration)
                .attr('height', (d) => {
                return _graphHeight - _yScale(d.length);
            });
        }
        else {
            bar.append('rect')
                .attr('x', 1)
                .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)
                .attr('height', (d) => {
                return _graphHeight - _yScale(d.length);
            });
        }
        bar.append('text')
            .attr('dy', '.75em')
            .attr('y', 6)
            .attr('x', (_xScale(bins[0].x1) - _xScale(bins[0].x0)) / 2)
            .attr('text-anchor', 'middle')
            .text((d) => {
            return formatCount(d.length);
        });
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        // ------------------------------------
        // ---CALL buildAxis-----------------
        this.buildYAxis(cdt);
        this.buildXAxis(cdt);
        if (_gridYDisplay) {
            this.drawYGrid(cdt);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildForce(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('In  buildFoce----------------');
        const /** @type {?} */ _maxX = 100;
        const /** @type {?} */ _maxY = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _centerPos = cdt.graphCenterPos;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _marginLeft = configData.margin.left;
        const /** @type {?} */ _marginTop = configData.margin.top;
        const /** @type {?} */ simulation = d3.forceSimulation()
            .force('link', d3.forceLink().id((d) => {
            return d.id;
        }))
            .force('charge', d3.forceManyBody())
            .force('center', d3.forceCenter(_graphWidth / 2, _graphHeight / 2));
        const /** @type {?} */ _forceContainer = svgContainer
            .append('g')
            .attr('transform', 'translate(' + _marginLeft + ',' + _marginTop + ')');
        const /** @type {?} */ link = _forceContainer.append('g')
            .attr('class', 'force-links')
            .selectAll('line')
            .data(dataSetJson.links)
            .enter()
            .append('line')
            .attr('stroke-width', (d) => {
            return Math.sqrt(d.value);
        });
        const /** @type {?} */ node = _forceContainer.append('g')
            .attr('class', 'nodes')
            .selectAll('circle')
            .data(dataSetJson.nodes)
            .enter()
            .append('circle')
            .attr('r', 5)
            .attr('fill', (d) => {
            return _color(d.group);
        })
            .call(d3.drag()
            .on('start', dragstarted)
            .on('drag', dragged)
            .on('end', dragended));
        node.append('title')
            .text((d) => {
            return d.id;
        });
        simulation
            .nodes(dataSetJson.nodes)
            .on('tick', ticked);
        const /** @type {?} */ _forceLink = simulation.force('link');
        _forceLink.links(dataSetJson.links);
        /**
         * @return {?}
         */
        function ticked() {
            link
                .attr('x1', (d) => {
                return d.source.x;
            })
                .attr('y1', (d) => {
                return d.source.y;
            })
                .attr('x2', (d) => {
                return d.target.x;
            })
                .attr('y2', (d) => {
                return d.target.y;
            });
            node
                .attr('cx', (d) => {
                return d.x;
            })
                .attr('cy', (d) => {
                return d.y;
            });
        }
        /**
         * @param {?} d
         * @return {?}
         */
        function dragstarted(d) {
            if (!d3.event.active) {
                simulation.alphaTarget(0.3).restart();
            }
            d.fx = d.x;
            d.fy = d.y;
        }
        /**
         * @param {?} d
         * @return {?}
         */
        function dragged(d) {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
        }
        /**
         * @param {?} d
         * @return {?}
         */
        function dragended(d) {
            if (!d3.event.active) {
                simulation.alphaTarget(0);
            }
            d.fx = null;
            d.fy = null;
        }
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        const /** @type {?} */ _legendDataSet = new Array();
        for (const /** @type {?} */ i in dataSetJson.groups) {
            if (dataSetJson.groups.hasOwnProperty(i)) {
                const /** @type {?} */ _id = dataSetJson.groups[i].id;
                _legendDataSet.push(new O2LegendData(dataSetJson.groups[i].name, _color(_id)));
            }
        }
        this.buildLegend(cdt, _legendDataSet);
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildChoropleth(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildChoropleth -------------------');
        const /** @type {?} */ _maxX = 100; // any value
        const /** @type {?} */ _maxY = 100; // any value
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
        const /** @type {?} */ _graphInitX = cdt.graphInitXPos;
        const /** @type {?} */ _graphInitY = cdt.graphInitYPos;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _focusColor = configData.color.focusColor;
        const /** @type {?} */ _scale = dataSetJson.map.scale;
        const /** @type {?} */ _targetName = dataSetJson.map.targetName;
        const /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
        const /** @type {?} */ _keyName = 'data.' + _keyDataName;
        const /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
        const /** @type {?} */ _startColor = dataSetJson.map.startColor;
        const /** @type {?} */ _endColor = dataSetJson.map.endColor;
        const /** @type {?} */ _colorNum = dataSetJson.map.colorNumber;
        const /** @type {?} */ _center = dataSetJson.map.center;
        const /** @type {?} */ _targetPropertyName = dataSetJson.map.targetPropertyName;
        const /** @type {?} */ _targetProperty = 'd.' + _targetPropertyName;
        const /** @type {?} */ color = d3.interpolateHsl(_startColor, _endColor);
        let /** @type {?} */ _max = dataSetJson.data[0].value;
        let /** @type {?} */ _min = dataSetJson.data[0].value;
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                if (_max < dataSetJson.data[i].value) {
                    _max = dataSetJson.data[i].value;
                }
                if (_min > dataSetJson.data[i].value) {
                    _min = dataSetJson.data[i].value;
                }
            }
        }
        const /** @type {?} */ _range = _max - _min;
        const /** @type {?} */ _step = _range / (_colorNum - 1);
        const /** @type {?} */ _findColorById = (id) => {
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    if (id === dataSetJson.data[i].id) {
                        const /** @type {?} */ _value = dataSetJson.data[i].value;
                        const /** @type {?} */ _rate = Math.ceil((_value - _min) / _step);
                        return color(_rate / _max);
                    }
                }
            }
        };
        const /** @type {?} */ path = d3.geoPath()
            .projection(d3.geoMercator()
            .center(_center)
            .scale(_scale)
            .translate(_graphCenterPos));
        d3.json(_geoMapDataUrl, (error, data) => {
            svgContainer.selectAll('path')
                .data(eval(_keyName))
                .enter()
                .append('path')
                .attr('d', path)
                .style('fill', (d, i) => {
                const /** @type {?} */ _cl = _findColorById(eval(_targetProperty));
                return _cl;
            });
        });
        // ------------------------------------
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (let /** @type {?} */ i = 0; i < _colorNum; i++) {
                const /** @type {?} */ _label = String(_min + (i * _step)) + ' --';
                _legendDataSet.push(new O2LegendData(_label, color(i / _max)));
            }
            this.buildLegend(cdt, _legendDataSet);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildPackLayout(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in PackLayout------------------');
        const /** @type {?} */ _packlayoutClass = configData.className.packlayout;
        const /** @type {?} */ _packlayoutLabelClass = configData.className.packlayoutLabel;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        const /** @type {?} */ color = d3.scaleOrdinal(d3.schemeCategory10);
        //  const color = d3.scale.category10();
        const /** @type {?} */ bubble = d3.pack()
            .size([svgWidth, svgHeight]);
        const /** @type {?} */ nodes0 = d3.hierarchy(dataSetJson);
        const /** @type {?} */ pack = svgContainer.selectAll('g')
            .data(bubble(nodes0).descendants())
            .enter()
            .append('g')
            .attr('transform', (d, i) => {
            return 'translate(' + d.x + ',' + d.y + ')';
        });
        const /** @type {?} */ _circle = pack.append('circle');
        if (_animation) {
            _circle.attr('r', 0)
                .transition()
                .duration((d, i) => {
                return d.depth * _animationDuration + 500;
            })
                .attr('r', (d) => {
                return d.r;
            })
                .style('fill', (d, i) => {
                return color(i);
            });
        }
        else {
            _circle.attr('r', (d) => {
                return d.r;
            })
                .style('fill', (d, i) => {
                return color(i);
            });
        }
        const /** @type {?} */ _text = pack.append('text')
            .attr('class', _packlayoutLabelClass)
            .text((d, i) => {
            if (d.depth === 1) {
                return d.data.name;
            }
            return null;
        });
        if (_animation) {
            _text.style('opacity', 0)
                .transition()
                .duration(_animationDuration)
                .style('opacity', 1.0);
        }
        else {
            _text.style('opacity', 1.0);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildTree(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('In  buildTree----------------');
        let /** @type {?} */ _maxX = 0;
        let /** @type {?} */ _maxY = 0;
        _maxY = 100;
        _maxX = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        const /** @type {?} */ _treemapClass = configData.className.treemap;
        const /** @type {?} */ _treemapLabelClass = configData.className.treemapLabel;
        const /** @type {?} */ _marginLeft = configData.margin.left;
        const /** @type {?} */ _marginTop = configData.margin.top;
        const /** @type {?} */ tree = d3.tree()
            .size([_graphWidth, _graphHeight]);
        const /** @type {?} */ nodes0 = d3.hierarchy(dataSetJson);
        const /** @type {?} */ nodes = tree(nodes0);
        const /** @type {?} */ _treeContainer = svgContainer
            .append('g')
            .attr('transform', 'translate(' + _marginLeft + ',' + _marginTop + ')');
        const /** @type {?} */ link = _treeContainer
            .selectAll('.link')
            .data(nodes.descendants().slice(1))
            .enter()
            .append('path')
            .attr('class', 'tree-node-link')
            .attr('d', (d) => {
            return 'M' + d.x + ',' + d.y
                + 'C' + d.x + ',' + (d.y + d.parent.y) / 2
                + ' ' + d.parent.x + ',' + (d.y + d.parent.y) / 2
                + ' ' + d.parent.x + ',' + d.parent.y;
        });
        const /** @type {?} */ node = _treeContainer
            .selectAll('.node')
            .data(nodes.descendants())
            .enter()
            .append('g')
            .attr('class', (d) => {
            return 'tree-node' +
                (d.children ? '-internal' : '-leaf');
        })
            .attr('transform', (d) => {
            return 'translate(' + d.x + ',' + d.y + ')';
        });
        node.append('circle')
            .attr('r', 10);
        node.append('text')
            .attr('dy', '.35em')
            .attr('y', (d) => {
            return d.children ? -20 : 20;
        })
            .style('text-anchor', 'middle')
            .text((d) => {
            return d.data.name;
        });
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildGeoOrthographic(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildGeoOrthographic -------------------');
        const /** @type {?} */ _maxX = 100; // any value
        const /** @type {?} */ _maxY = 100; // any value
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
        const /** @type {?} */ _graphInitX = cdt.graphInitXPos;
        const /** @type {?} */ _graphInitY = cdt.graphInitYPos;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _focusColor = configData.color.focusColor;
        const /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
        const /** @type {?} */ _scale = dataSetJson.map.scale;
        const /** @type {?} */ _targetName = dataSetJson.map.targetName;
        const /** @type {?} */ _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;
        const /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
        const /** @type {?} */ _keyName = 'data.' + _keyDataName;
        const /** @type {?} */ _clipAngle = dataSetJson.map.clipAngle;
        const /** @type {?} */ _rotateH = dataSetJson.map.rotate.horizontal;
        const /** @type {?} */ _rotateV = dataSetJson.map.rotate.vertical;
        const /** @type {?} */ _oceanColor = dataSetJson.map.oceanColor;
        const /** @type {?} */ _antarcticaColor = dataSetJson.map.antarcticaColor;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        let /** @type {?} */ _animationH = 0;
        const /** @type {?} */ _findColorByName = (name) => {
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    if (name === dataSetJson.data[i].name) {
                        const /** @type {?} */ _color = dataSetJson.data[i].color;
                        return _color;
                    }
                }
            }
            return null;
        };
        const /** @type {?} */ targetPath = d3.geoOrthographic()
            .translate(_graphCenterPos)
            .clipAngle(_clipAngle)
            .scale(_scale)
            .rotate([_rotateH, _rotateV]);
        const /** @type {?} */ path = d3.geoPath()
            .projection(targetPath);
        d3.json(_geoMapDataUrl, (error, data) => {
            svgContainer.append('circle')
                .attr('cx', _graphCenterPos[0])
                .attr('cy', _graphCenterPos[1])
                .attr('r', _scale)
                .style('fill', _oceanColor);
            const /** @type {?} */ earthPath = svgContainer.selectAll('path')
                .data(eval(_keyName))
                .enter()
                .append('path')
                .attr('d', path)
                .style('fill', (d, i) => {
                const /** @type {?} */ _targetArea = eval(_targetProperty);
                if (_findColorByName(_targetArea) !== null) {
                    return _findColorByName(_targetArea);
                }
                return 'hsl(' + i + ',80%,60%)';
            });
            if (_animation) {
                d3.timer(() => {
                    targetPath.rotate([_rotateH + _animationH, _rotateV]);
                    _animationH += 2;
                    earthPath.attr('d', path);
                });
            }
        });
        // ------------------------------------
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    const /** @type {?} */ _name = dataSetJson.data[i].name;
                    const /** @type {?} */ _color = dataSetJson.data[i].color;
                    if (_name === 'Antarctica') {
                        continue;
                    }
                    _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));
                }
            }
            this.buildLegend(cdt, _legendDataSet);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildGeoMap(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildGeoMap -------------------');
        const /** @type {?} */ _maxX = 100; // any value
        const /** @type {?} */ _maxY = 100; // any value
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _graphCenterPos = cdt.graphCenterPos;
        const /** @type {?} */ _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;
        const /** @type {?} */ _scale = dataSetJson.map.scale;
        const /** @type {?} */ _keyDataName = dataSetJson.map.keyDataName;
        const /** @type {?} */ _keyName = 'data.' + _keyDataName;
        const /** @type {?} */ _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;
        const /** @type {?} */ _antarcticaColor = dataSetJson.map.antarcticaColor;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ path = d3.geoPath()
            .projection(d3.geoMercator()
            .translate(_graphCenterPos)
            .scale(_scale));
        const /** @type {?} */ _findColorByName = (name) => {
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    if (name === dataSetJson.data[i].name) {
                        const /** @type {?} */ _color = dataSetJson.data[i].color;
                        return _color;
                    }
                }
            }
            return null;
        };
        d3.json(_geoMapDataUrl, (error, data) => {
            svgContainer.selectAll('path')
                .data(eval(_keyName))
                .enter()
                .append('path')
                .attr('d', path)
                .style('fill', (d, i) => {
                const /** @type {?} */ _targetArea = eval(_targetProperty);
                if (_findColorByName(_targetArea) !== null) {
                    return _findColorByName(_targetArea);
                }
                return 'hsl(' + i + ',80%,60%)';
            });
        });
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    const /** @type {?} */ _name = dataSetJson.data[i].name;
                    const /** @type {?} */ _color = dataSetJson.data[i].color;
                    if (_name === 'Antarctica') {
                        continue;
                    }
                    _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));
                }
            }
            this.buildLegend(cdt, _legendDataSet);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildStackBar(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildStackBar-------------------');
        /**
         * @record
         */
        function HashString() { }
        function HashString_tsickle_Closure_declarations() {
            /* TODO: handle strange member:
            [index: string]: string;
            */
        }
        /**
         * @record
         */
        function HashNumber() { }
        function HashNumber_tsickle_Closure_declarations() {
            /* TODO: handle strange member:
            [key: string]: number;
            */
        }
        const /** @type {?} */ _totalY = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                _totalY.push(0);
            }
        }
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                let /** @type {?} */ k = 0;
                for (const /** @type {?} */ j in dataSetJson.data[i].value) {
                    if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                        _totalY[k++] += dataSetJson.data[i].value[j].y;
                    }
                }
            }
        }
        let /** @type {?} */ _maxX = 0;
        let /** @type {?} */ _maxY = 0;
        _maxY = d3.max(_totalY);
        _maxX = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _columnNum = dataSetJson.data.length;
        const /** @type {?} */ _barWidth = (cdt.graphWidth / _columnNum) - configData.margin.between;
        const /** @type {?} */ _columnWidth = (cdt.graphWidth / _columnNum);
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _maxYValue = cdt.maxYValue;
        const /** @type {?} */ _opacity = configData.color.opacity;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _gridYDisplay = configData.grid.y.display;
        const /** @type {?} */ _gridXDisplay = configData.grid.x.display;
        const /** @type {?} */ _labelDisplay = configData.label.display;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        //  Get Data Name
        const /** @type {?} */ _seriesDateName = dataSetJson.series[0];
        //  Get Keys
        const /** @type {?} */ _keyArray = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                const /** @type {?} */ _key = dataSetJson.data[i].name;
                const /** @type {?} */ _value = dataSetJson.data[i].value[0].y;
                _keyArray.push(_key);
            }
        }
        //  Get Date String
        const /** @type {?} */ _dateArray = new Array();
        for (const /** @type {?} */ i in dataSetJson.data[0].value) {
            if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                const /** @type {?} */ _xValue = dataSetJson.data[0].value[i].x;
                _dateArray.push(_xValue);
            }
        }
        const /** @type {?} */ _hashArray = new Array();
        for (const /** @type {?} */ i in _dateArray) {
            if (_dateArray.hasOwnProperty(i)) {
                const /** @type {?} */ _dateSt = _dateArray[i];
                const /** @type {?} */ _hashNumber = {};
                for (const /** @type {?} */ j in _keyArray) {
                    if (_keyArray.hasOwnProperty(j)) {
                        const /** @type {?} */ _key = _keyArray[j];
                        const /** @type {?} */ _value = dataSetJson.data[j].value[i].y;
                        _hashNumber[_key] = _value;
                    }
                }
                _hashArray.push(_hashNumber);
            }
        }
        const /** @type {?} */ yScale = d3.scaleLinear()
            .domain([0, _maxYValue])
            .range([0, _graphHeight]);
        const /** @type {?} */ stack = d3.stack();
        const /** @type {?} */ _rect = svgContainer.selectAll('g')
            .data(stack.keys(_keyArray)(_hashArray))
            .enter()
            .append('g')
            .attr('fill', (d, i) => {
            return _color(i);
        })
            .attr('fill-opacity', _opacity)
            .selectAll('rect')
            .data((d, i) => {
            return d;
        })
            .enter()
            .append('rect');
        if (_animation) {
            _rect.attr('x', (d, i) => {
                return _initPosX + i * _columnWidth;
            })
                .attr('height', 0)
                .attr('y', (d, i) => {
                const /** @type {?} */ nm = 'd.data.' + _keyArray[i];
                const /** @type {?} */ _yValue = eval(nm);
                return svgHeight - configData.margin.bottom - yScale(d[1]);
            })
                .attr('width', _barWidth)
                .transition()
                .duration(_animationDuration)
                .attr('height', (d, i) => {
                return yScale(d[1] - d[0]);
            });
        }
        else {
            _rect.attr('x', (d, i) => {
                return _initPosX + (i * _columnWidth);
            })
                .attr('y', (d, i) => {
                const /** @type {?} */ nm = 'd.data.' + _keyArray[i];
                const /** @type {?} */ _yValue = eval(nm);
                return svgHeight - configData.margin.bottom - yScale(d[1]);
            })
                .attr('width', _barWidth)
                .attr('height', (d, i) => {
                return yScale(d[1] - d[0]);
            });
        }
        // ------------------------------------
        // ---CALL buildTitle-----------------
        this.drawTitle(cdt);
        // ------------------------------------
        // ---CALL buildAxis-----------------
        this.buildYAxis(cdt);
        this.drawXBaseLine(cdt);
        //  ------------------------------------
        //  ---CALL drawXAxisLabel-----------------
        if (_labelDisplay) {
            const /** @type {?} */ _labelArray = new Array();
            for (const /** @type {?} */ i in dataSetJson.data[0].value) {
                if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                    _labelArray.push(dataSetJson.data[0].value[i].x);
                }
            }
            this.drawXAxisLabel(cdt, _labelArray, ChartConst.STACK_BAR_CHART_TYPE_NAME);
        }
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
                }
            }
            this.buildLegend(cdt, _legendDataSet);
        }
        if (_gridYDisplay) {
            this.drawYGrid(cdt);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildScatterPlot(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('In  buildScatterPlot----------------');
        const /** @type {?} */ _dataSet = new Array();
        let /** @type {?} */ _maxX = 0;
        let /** @type {?} */ _maxY = 0;
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                for (const /** @type {?} */ j in dataSetJson.data[i].value) {
                    if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                        if (_maxX < dataSetJson.data[i].value[j].x) {
                            _maxX = dataSetJson.data[i].value[j].x;
                        }
                        if (_maxY < dataSetJson.data[i].value[j].y) {
                            _maxY = dataSetJson.data[i].value[j].y;
                        }
                        const /** @type {?} */ _scatterPlotData = new O2ScatterPlotData(dataSetJson.data[i].value[j].x, dataSetJson.data[i].value[j].y, dataSetJson.data[i].value[j].r);
                        _dataSet.push(_scatterPlotData);
                    }
                }
            }
        }
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _seriesNumber = dataSetJson.series.length;
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _opacity = configData.color.opacity;
        const /** @type {?} */ _gridYDisplay = configData.grid.y.display;
        const /** @type {?} */ _gridXDisplay = configData.grid.x.display;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _circle = svgContainer.selectAll('circle')
            .data(_dataSet)
            .enter()
            .append('circle')
            .attr('cx', (d, i) => {
            return _initPosX + d.x;
        })
            .attr('cy', (d, i) => {
            return (svgHeight - configData.margin.bottom - d.y);
        })
            .attr('r', (d, i) => {
            return d.r;
        })
            .style('fill', (d, i) => {
            const /** @type {?} */ _colorNum = i % _seriesNumber;
            return _color(_colorNum);
        })
            .attr('fill-opacity', _opacity);
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        // ------------------------------------
        // ---CALL buildLegend-----------------
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (let /** @type {?} */ i = 0; i < dataSetJson.series.length; i++) {
                _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));
            }
            this.buildLegend(cdt, _legendDataSet);
        }
        // ------------------------------------
        // ---CALL buildAxis-----------------
        this.buildYAxis(cdt);
        this.buildXAxis(cdt);
        if (_gridYDisplay) {
            this.drawYGrid(cdt);
        }
        if (_gridXDisplay) {
            this.drawXGrid(cdt);
        }
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    drawXGrid(o2Common) {
        console.log('in buildXGrid-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _stepX = cdt.gridXStep;
        const /** @type {?} */ _maxX = cdt.maxXValue;
        const /** @type {?} */ _graphYScale = cdt.graphYScale;
        const /** @type {?} */ _graphXScale = cdt.graphXScale;
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _gridClassName = configData.className.grid;
        const /** @type {?} */ _axisXScale = d3.scaleLinear()
            .domain([0, _maxX])
            .range([0, _maxX * _graphXScale]);
        const /** @type {?} */ _rangeX = d3.range(_stepX * _graphXScale, _maxX * _graphXScale, _stepX * _graphXScale);
        svgContainer.append('g')
            .selectAll('line.x')
            .data(_rangeX)
            .enter()
            .append('line')
            .attr('class', _gridClassName)
            .attr('x1', (d, i) => {
            const /** @type {?} */ _x1 = configData.margin.left + d;
            return _x1;
        })
            .attr('y1', cdt.svgHeight - configData.margin.bottom)
            .attr('x2', (d, i) => {
            const /** @type {?} */ _x2 = configData.margin.left + d;
            return _x2;
        })
            .attr('y2', configData.margin.top + configData.title.height);
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    buildXAxis(o2Common) {
        console.log('in buildXAxis-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _maxX = cdt.maxXValue;
        const /** @type {?} */ _graphXScale = cdt.graphXScale;
        const /** @type {?} */ _axisXScale = d3.scaleLinear()
            .domain([0, _maxX])
            .range([0, _maxX * _graphXScale]);
        svgContainer.append('g')
            .attr('class', cdt.axisClassName)
            .attr('transform', cdt.axisXBorderTranslatePos)
            .call(d3.axisBottom(_axisXScale));
        //  .scale()
        //  .orient(cdt.axisXOrient)
        //  );
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildPie(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('In  buildPie----------------');
        const /** @type {?} */ _maxX = 100;
        const /** @type {?} */ _maxY = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _opacity = configData.color.opacity;
        const /** @type {?} */ _titleHeight = configData.title.height;
        const /** @type {?} */ _leftMargin = configData.margin.left;
        const /** @type {?} */ _topMargin = configData.margin.top;
        const /** @type {?} */ _bottomMargin = configData.margin.bottom;
        const /** @type {?} */ _betweenMargin = configData.margin.between;
        const /** @type {?} */ _innerRadiusPercent = cdt.innerRadiusPercent;
        const /** @type {?} */ _graphCenterTranslatePos = cdt.graphCenterTranslatePos;
        const /** @type {?} */ _pieClassName = configData.className.pie;
        const /** @type {?} */ _pieValueClassName = configData.className.pieNum;
        const /** @type {?} */ _pieInnerTitleClassName = configData.className.pieInnerTitle;
        const /** @type {?} */ _innerRadiusTitleTranslatePos = cdt.innerRadiusTitleTranslatePos;
        const /** @type {?} */ _innerRadiusTitle = cdt.innerRadiusTitle;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _labelDisplay = configData.label.display;
        const /** @type {?} */ _valueDisplay = configData.pie.value.display;
        const /** @type {?} */ _percentDisplay = configData.pie.percent.display;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        const /** @type {?} */ width = svgWidth;
        const /** @type {?} */ height = svgHeight;
        const /** @type {?} */ dataSet = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                const /** @type {?} */ _num = dataSetJson.data[i].value;
                dataSet.push(_num);
            }
        }
        const /** @type {?} */ _sum = d3.sum(dataSet);
        const /** @type {?} */ pie = d3.pie();
        const /** @type {?} */ arc = d3.arc()
            .innerRadius(_graphHeight * _innerRadiusPercent / 100)
            .outerRadius(_graphHeight / 2);
        const /** @type {?} */ pieElements = svgContainer.selectAll('path')
            .data(pie(dataSet))
            .enter()
            .append('g')
            .attr('transform', _graphCenterTranslatePos);
        const /** @type {?} */ _makeCenterTitle = () => {
            if (_valueDisplay && _percentDisplay) {
                const /** @type {?} */ _st = _innerRadiusTitle + ':' + _sum + ' (100%)';
                return _st;
            }
            if (_percentDisplay) {
                return '100%';
            }
            if (_valueDisplay) {
                return _innerRadiusTitle + ':' + _sum;
            }
        };
        const /** @type {?} */ textElements = svgContainer.append('text')
            .attr('class', _pieInnerTitleClassName)
            .attr('transform', _innerRadiusTitleTranslatePos)
            .text(_makeCenterTitle);
        const /** @type {?} */ _arc = pieElements.append('path')
            .attr('class', _pieClassName)
            .style('fill', (d, i) => {
            return _color(i);
        })
            .attr('fill-opacity', _opacity);
        //  For d3Version4 animation is not available now
        //  if (_animation) {
        //      _arc.transition()
        //      .duration(_animationDuration)
        //      .delay((d,i)=> {
        //          return i *1000;
        //      })
        //      .attrTween('d',(d: any,i: number) =>  {
        //          const _interpolate = d3.interpolateObject(
        //              { startAngle:d.startAngle,endAngle:d.startAngle }
        //              { startAngle:d.startAngle,endAngle:d.endAngle }
        //          )
        //          return (t) {
        //              return arc(_interpolate(t));
        //          }
        //      })
        //  }
        //  else{
        //      _arc.attr('d',arc);
        //  }
        _arc.attr('d', arc);
        pieElements.append('text')
            .attr('class', _pieValueClassName)
            .attr('transform', (d, i) => {
            return 'translate(' + arc.centroid(d) + ')';
        })
            .text((d, i) => {
            if (_valueDisplay && _percentDisplay) {
                const /** @type {?} */ _percentSt = String(Math.ceil(d.value / _sum * 100));
                const /** @type {?} */ _st = String(d.value) + ' (' + _percentSt + '%)';
                return _st;
            }
            if (_percentDisplay) {
                const /** @type {?} */ _percentSt = String(Math.ceil(d.value / _sum * 100));
                const /** @type {?} */ _st = _percentSt + '%';
                return _st;
            }
            if (_valueDisplay) {
                return d.value;
            }
        });
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        // ------------------------------------
        // ---CALL buildLegend-----------------
        if (_legendDisplay) {
            const /** @type {?} */ _legendDataSet = new Array();
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
                }
            }
            this.buildLegend(cdt, _legendDataSet);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildBar(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('In  buildBar----------------');
        const /** @type {?} */ _yDataSet = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                for (const /** @type {?} */ j in dataSetJson.data[i].y) {
                    if (dataSetJson.data[i].y.hasOwnProperty(j)) {
                        const /** @type {?} */ _y = dataSetJson.data[i].y[j];
                        _yDataSet.push(_y);
                    }
                }
            }
        }
        let /** @type {?} */ _maxX = 0;
        let /** @type {?} */ _maxY = 0;
        _maxY = d3.max(_yDataSet);
        _maxX = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _barValueClass = configData.className.barValue;
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _seriesNum = dataSetJson.series.length;
        const /** @type {?} */ _columnNum = _yDataSet.length;
        const /** @type {?} */ _initPosX = cdt.graphInitXPos;
        const /** @type {?} */ _initPosY = cdt.graphInitYPos;
        const /** @type {?} */ _graphHeight = cdt.graphHeight;
        const /** @type {?} */ _graphWidth = cdt.graphWidth;
        const /** @type {?} */ _maxYValue = cdt.maxYValue;
        const /** @type {?} */ _opacity = configData.color.opacity;
        const /** @type {?} */ _titleHeight = configData.title.height;
        const /** @type {?} */ _titleDisplay = configData.title.display;
        const /** @type {?} */ _leftMargin = configData.margin.left;
        const /** @type {?} */ _topMargin = configData.margin.top;
        const /** @type {?} */ _bottomMargin = configData.margin.bottom;
        const /** @type {?} */ _betweenMargin = configData.margin.between;
        const /** @type {?} */ _legendDisplay = configData.legend.display;
        const /** @type {?} */ _labelDisplay = configData.label.display;
        const /** @type {?} */ _gridYDisplay = configData.grid.y.display;
        const /** @type {?} */ _animation = configData.animation.enable;
        const /** @type {?} */ _animationDuration = configData.animation.duration;
        const /** @type {?} */ _barWidth = (_graphWidth - (_betweenMargin * _columnNum / _seriesNum)) / _columnNum;
        const /** @type {?} */ _columnWidth = (_graphWidth / _columnNum);
        const /** @type {?} */ _graphYScale = cdt.graphYScale;
        const /** @type {?} */ yBarScale = d3.scaleLinear()
            .domain([0, _maxY])
            .range([_maxY * _graphYScale, 0]);
        const /** @type {?} */ _barPadding = _betweenMargin;
        const /** @type {?} */ grpGraph = svgContainer.selectAll('g')
            .data(_yDataSet)
            .enter()
            .append('g')
            .attr('transform', (d, i) => {
            const /** @type {?} */ _padding = ((i % _seriesNum) === 0) ? _barPadding : 0;
            return 'translate(' + (_padding + _columnWidth * i) + ')';
        })
            .style('fill', (d, i) => {
            const /** @type {?} */ _remnant = (i % _seriesNum);
            return _color(_remnant);
        })
            .attr('fill-opacity', _opacity);
        const /** @type {?} */ _rect = grpGraph.append('rect');
        if (_animation) {
            _rect.attr('x', _leftMargin)
                .attr('height', 0)
                .attr('y', (d) => {
                return _initPosY;
            })
                .attr('width', _barWidth - _barPadding)
                .transition()
                .duration(_animationDuration)
                .attr('y', (d) => {
                return yBarScale(d) + _initPosY;
            })
                .attr('height', (d) => {
                return _graphHeight - yBarScale(d);
            });
        }
        else {
            _rect.attr('x', _leftMargin)
                .attr('y', (d) => {
                return yBarScale(d) + _initPosY;
            })
                .attr('width', _barWidth - _barPadding)
                .attr('height', (d) => {
                return _graphHeight - yBarScale(d);
            });
        }
        const /** @type {?} */ textBarValue = grpGraph.append('text');
        textBarValue
            .attr('class', _barValueClass)
            .attr('x', _leftMargin)
            .attr('y', (d) => {
            return yBarScale(d) + _initPosY;
        })
            .text((d) => {
            return d;
        });
        // ------------------------------------
        // ---CALL buildAxis-----------------
        this.buildYAxis(cdt);
        //  ------------------------------------
        //  ---CALL drawXAxisLabel-----------------
        if (_labelDisplay) {
            const /** @type {?} */ _labelArray = new Array();
            for (const /** @type {?} */ i in dataSetJson.data) {
                if (dataSetJson.data.hasOwnProperty(i)) {
                    _labelArray.push(dataSetJson.data[i].x);
                }
            }
            this.drawXAxisLabel(cdt, _labelArray, ChartConst.BAR_CHART_TYPE_NAME);
        }
        this.drawXBaseLine(cdt);
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        const /** @type {?} */ _legendDataSet = new Array();
        for (const /** @type {?} */ i in dataSetJson.series) {
            if (dataSetJson.series.hasOwnProperty(i)) {
                _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));
            }
        }
        this.buildLegend(cdt, _legendDataSet);
        // ------------------------------------
        // ---CALL buildTitle-----------------
        if (_titleDisplay) {
            this.drawTitle(cdt);
        }
        if (_gridYDisplay) {
            this.drawYGrid(cdt);
        }
    }
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} dataSetJson
     * @param {?} svgWidth
     * @param {?} svgHeight
     * @return {?}
     */
    buildLine(svgContainer, configData, dataSetJson, svgWidth, svgHeight) {
        console.log('in buildTest-------------------');
        const /** @type {?} */ _groupMaxY = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                let /** @type {?} */ _gMaxY = 0;
                for (const /** @type {?} */ j in dataSetJson.data[i].value) {
                    if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                        if (_gMaxY < dataSetJson.data[i].value[j].y) {
                            _gMaxY = dataSetJson.data[i].value[j].y;
                        }
                    }
                }
                _groupMaxY.push(_gMaxY);
            }
        }
        let /** @type {?} */ _maxX = 0;
        let /** @type {?} */ _maxY = 0;
        _maxY = d3.max(_groupMaxY);
        _maxX = 100;
        const /** @type {?} */ cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);
        const /** @type {?} */ _color = cdt.defaultColorFunc;
        const /** @type {?} */ _columnNum = dataSetJson.data[0].value.length;
        const /** @type {?} */ _columnWidth = cdt.graphWidth / _columnNum;
        console.log(_columnWidth);
        if (configData.grid.y.display) {
            this.drawYGrid(cdt);
        }
        //  O2IdValueData
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                const /** @type {?} */ _lineArray = new Array();
                for (const /** @type {?} */ j in dataSetJson.data[i].value) {
                    if (dataSetJson.data[i].value.hasOwnProperty(j)) {
                        const /** @type {?} */ idValue = new O2IdValueData(parseInt(j, 10), dataSetJson.data[i].value[j].y);
                        _lineArray.push(idValue);
                    }
                }
                const /** @type {?} */ num = parseInt(i, 10);
                this.drawSingleLine(cdt, _lineArray, num);
            }
        }
        // ------------------------------------
        // ---CALL buildTitle-----------------
        this.drawTitle(cdt);
        // ------------------------------------
        // ---CALL buildAxis-----------------
        this.buildYAxis(cdt);
        this.drawXBaseLine(cdt);
        //  ------------------------------------
        //  ---CALL drawXAxisLabel-----------------
        const /** @type {?} */ _labelArray = new Array();
        for (const /** @type {?} */ i in dataSetJson.data[0].value) {
            if (dataSetJson.data[0].value.hasOwnProperty(i)) {
                _labelArray.push(dataSetJson.data[0].value[i].x);
            }
        }
        this.drawXAxisLabel(cdt, _labelArray, ChartConst.LINE_CHART_TYPE_NAME);
        //  ------------------------------------
        //  ---CALL buildLegend-----------------
        const /** @type {?} */ _legendDataSet = new Array();
        for (const /** @type {?} */ i in dataSetJson.data) {
            if (dataSetJson.data.hasOwnProperty(i)) {
                _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));
            }
        }
        this.buildLegend(cdt, _legendDataSet);
    }
    /**
     * @param {?} o2Common
     * @param {?} dataSet
     * @param {?} lineNum
     * @return {?}
     */
    drawSingleLine(o2Common, dataSet, lineNum) {
        console.log('in drawSingleLine-------------------');
        console.log(dataSet);
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _maxX = cdt.maxXValue;
        const /** @type {?} */ _initXPos = cdt.axisXLabelInitXPos;
        const /** @type {?} */ _initYPos = cdt.axisXLabelInitYPos;
        const /** @type {?} */ _columnNum = dataSet.length;
        const /** @type {?} */ _columnWidth = cdt.graphWidth / (_columnNum - 1);
        const /** @type {?} */ _color = d3.scaleOrdinal(d3.schemeCategory10);
        const /** @type {?} */ _lineClassName = configData.className.multiLinePrefix + String(lineNum);
        const /** @type {?} */ _leftMargin = configData.margin.left;
        const /** @type {?} */ _bottomMargin = configData.margin.bottom;
        const /** @type {?} */ _yScale = cdt.graphYScale;
        const /** @type {?} */ line = d3.line()
            .curve(d3.curveLinear)
            .x((d) => {
            return _leftMargin + d.id * _columnWidth;
        })
            .y((d) => {
            return cdt.svgHeight - _bottomMargin - (d.value * _yScale);
        });
        svgContainer.append('path')
            .attr('class', _lineClassName)
            .attr('d', line(dataSet));
        //  .attr('transform', cdt.axisTranslatePos)
    }
    /**
     * @param {?} o2Common
     * @param {?} _legendDataSet
     * @return {?}
     */
    buildLegend(o2Common, _legendDataSet) {
        console.log('in buildLegend-------------------');
        //  maxValues are meaningless
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        //  const cdt = new O2Common(configData, 100, 100, svgWidth, svgHeight);
        const /** @type {?} */ legendRectSize = configData.legend.rectWidth;
        const /** @type {?} */ legendSpacing = 10;
        const /** @type {?} */ ySpacing = configData.legend.ySpacing;
        const /** @type {?} */ initPosX = cdt.legendInitXPos;
        const /** @type {?} */ initPosY = cdt.legendInitYPos;
        const /** @type {?} */ opacity = configData.color.opacity;
        const /** @type {?} */ grpLegend = svgContainer.append('g')
            .selectAll('g')
            .data(_legendDataSet)
            .enter()
            .append('g')
            .attr('class', 'legend')
            .attr('transform', (d, i) => {
            const /** @type {?} */ height = legendRectSize + ySpacing;
            const /** @type {?} */ x = initPosX;
            const /** @type {?} */ y = i * height + initPosY;
            return 'translate(' + x + ', ' + y + ')';
        });
        grpLegend.append('rect')
            .attr('width', legendRectSize)
            .attr('height', legendRectSize)
            .style('fill', (d) => {
            return d.color;
        })
            .style('stroke', (d) => {
            return d.color;
        })
            .attr('fill-opacity', opacity);
        grpLegend.append('text')
            .attr('x', legendRectSize + legendSpacing)
            .attr('y', legendRectSize)
            .text((d) => {
            return d.title;
        });
    }
    /**
     * @param {?} o2Common
     * @param {?} labelDataSet
     * @param {?} chartType
     * @return {?}
     */
    drawXAxisLabel(o2Common, labelDataSet, chartType) {
        console.log('in drawXAxisLabel-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        // const _maxX = cdt.maxXValue;
        const /** @type {?} */ _initXPos = cdt.axisXLabelInitXPos;
        const /** @type {?} */ _initYPos = cdt.axisXLabelInitYPos;
        const /** @type {?} */ _columnNum = labelDataSet.length;
        let /** @type {?} */ _columnWidth = cdt.graphWidth / _columnNum;
        if (chartType === ChartConst.LINE_CHART_TYPE_NAME) {
            _columnWidth = cdt.graphWidth / (_columnNum - 1);
        }
        const /** @type {?} */ grpLabel = svgContainer.append('g')
            .selectAll('g')
            .data(labelDataSet)
            .enter()
            .append('g')
            .attr('class', configData.axisXText)
            .attr('transform', (d, i) => {
            const /** @type {?} */ _x = _initXPos + _columnWidth * i;
            const /** @type {?} */ _y = _initYPos;
            return 'translate(' + _x + ', ' + _y + ')';
        });
        grpLabel.append('text')
            .attr('class', configData.className.axisXText)
            .text((d, i) => {
            return d;
        });
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    drawXBaseLine(o2Common) {
        console.log('in drawXBaseLine-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        svgContainer.append('rect')
            .attr('class', cdt.axisXBorderLineClassName)
            .attr('width', cdt.axisXBorderWidth)
            .attr('height', cdt.axisXBorderLineWidth)
            .attr('transform', cdt.axisXBorderTranslatePos);
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    buildYAxis(o2Common) {
        console.log('in buildYAxis-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _maxY = cdt.maxYValue;
        const /** @type {?} */ _graphYScale = cdt.graphYScale;
        const /** @type {?} */ _axisYScale = d3.scaleLinear()
            .domain([0, _maxY])
            .range([_maxY * _graphYScale, 0]);
        svgContainer.append('g')
            .attr('class', cdt.axisClassName)
            .attr('transform', cdt.axisTranslatePos)
            .call(d3.axisLeft(_axisYScale));
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    drawTitle(o2Common) {
        console.log('in drawTitle-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _title = configData.title.name;
        const /** @type {?} */ _xPos = cdt.titleInitXPos;
        const /** @type {?} */ _yPos = cdt.titleInitYPos;
        const /** @type {?} */ _titleClassName = configData.title.className;
        svgContainer.append('text')
            .attr('class', _titleClassName)
            .attr('x', _xPos)
            .attr('y', _yPos)
            .text(_title);
    }
    /**
     * @param {?} o2Common
     * @return {?}
     */
    drawYGrid(o2Common) {
        console.log('in buildYGrid-------------------');
        const /** @type {?} */ cdt = o2Common;
        const /** @type {?} */ configData = cdt.configData;
        const /** @type {?} */ svgContainer = cdt.svgContainer;
        const /** @type {?} */ _stepY = cdt.gridYStep;
        const /** @type {?} */ _maxY = cdt.maxYValue;
        const /** @type {?} */ _graphYScale = cdt.graphYScale;
        const /** @type {?} */ _gridClassName = configData.className.grid;
        const /** @type {?} */ _rangeY = d3.range(_stepY * _graphYScale, _maxY * _graphYScale, _stepY * _graphYScale);
        svgContainer.append('g')
            .selectAll('line.y')
            .data(_rangeY)
            .enter()
            .append('line')
            .attr('class', _gridClassName)
            .attr('x1', configData.margin.left)
            .attr('y1', (d, i) => {
            const /** @type {?} */ _y1 = cdt.svgHeight - configData.margin.bottom - d;
            return _y1;
        })
            .attr('x2', configData.margin.left + cdt.axisXBorderWidth)
            .attr('y2', (d, i) => {
            const /** @type {?} */ _y1 = cdt.svgHeight - configData.margin.bottom - d;
            return _y1;
        });
    }
}
Ng6O2ChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-Ng6O2Chart',
                template: ``,
                styles: []
            },] },
];
/** @nocollapse */
Ng6O2ChartComponent.ctorParameters = () => [
    { type: ElementRef }
];
Ng6O2ChartComponent.propDecorators = {
    chartType: [{ type: Input }],
    svgWidth: [{ type: Input }],
    svgHeight: [{ type: Input }],
    graphData: [{ type: Input }],
    configData: [{ type: Input }]
};
function Ng6O2ChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    Ng6O2ChartComponent.prototype.chartType;
    /** @type {?} */
    Ng6O2ChartComponent.prototype.svgWidth;
    /** @type {?} */
    Ng6O2ChartComponent.prototype.svgHeight;
    /** @type {?} */
    Ng6O2ChartComponent.prototype.graphData;
    /** @type {?} */
    Ng6O2ChartComponent.prototype.configData;
    /** @type {?} */
    Ng6O2ChartComponent.prototype.root;
}

//# sourceMappingURL=data:application/json;base64,