/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as d3 from 'd3';
export class O2Common {
    /**
     * @param {?} svgContainer
     * @param {?} configData
     * @param {?} autoMaxX
     * @param {?} autoMaxY
     * @param {?} svgWidth
     * @param {?} svgHeight
     */
    constructor(svgContainer, configData, autoMaxX, autoMaxY, svgWidth, svgHeight) {
        this.svgContainer = svgContainer;
        this.configData = configData;
        this.autoMaxX = autoMaxX;
        this.autoMaxY = autoMaxY;
        this.svgWidth = svgWidth;
        this.svgHeight = svgHeight;
    }
    /**
     * @return {?}
     */
    get axisClassName() {
        return this.configData.className.axis;
    }
    /**
     * @return {?}
     */
    get lineClassName() {
        return this.configData.className.line;
    }
    /**
     * @return {?}
     */
    get axisXBorderLineClassName() {
        return this.configData.className.axisXBorder;
    }
    /**
     * @return {?}
     */
    get maxXValue() {
        let /** @type {?} */ _maxX = this.autoMaxX;
        if (!this.configData.maxValue.auto) {
            _maxX = this.configData.maxValue.x;
        }
        return _maxX;
    }
    /**
     * @return {?}
     */
    get maxYValue() {
        let /** @type {?} */ _maxY = this.autoMaxY;
        if (!this.configData.maxValue.auto) {
            _maxY = this.configData.maxValue.y;
        }
        return _maxY;
    }
    /**
     * @return {?}
     */
    get graphInitXPos() {
        let /** @type {?} */ _intX = this.configData.margin.left;
        if (this.configData.legend.display && this.configData.legend.position !== 'right') {
            _intX = this.configData.margin.left
                + this.configData.legend.totalWidth;
        }
        return _intX;
    }
    /**
     * @return {?}
     */
    get graphInitYPos() {
        const /** @type {?} */ _intY = this.configData.margin.top
            + this.configData.title.height;
        return _intY;
    }
    /**
     * @return {?}
     */
    get graphYScale() {
        return this.graphHeight / this.maxYValue;
    }
    /**
     * @return {?}
     */
    get graphXScale() {
        return this.graphWidth / this.maxXValue;
    }
    /**
     * @return {?}
     */
    get graphWidth() {
        let /** @type {?} */ _margin = this.configData.margin.left
            + this.configData.margin.right;
        if (this.configData.legend.display) {
            _margin += this.configData.legend.totalWidth;
        }
        return this.svgWidth - _margin;
    }
    /**
     * @return {?}
     */
    get graphHeight() {
        const /** @type {?} */ _h = this.svgHeight
            - this.configData.title.height
            - this.configData.margin.top
            - this.configData.margin.bottom;
        return _h;
    }
    /**
     * @return {?}
     */
    get graphCenterPos() {
        const /** @type {?} */ _xyArray = new Array();
        const /** @type {?} */ _x = this.configData.margin.left
            + this.graphWidth / 2;
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height
            + this.graphHeight / 2;
        _xyArray.push(_x);
        _xyArray.push(_y);
        return _xyArray;
    }
    /**
     * @return {?}
     */
    get graphCenterTranslatePos() {
        const /** @type {?} */ _x = this.configData.margin.left
            + this.graphWidth / 2;
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height
            + this.graphHeight / 2;
        return 'translate(' + String(_x) + ', ' + String(_y) + ')';
    }
    /**
     * @return {?}
     */
    get graphInitTranslatePos() {
        const /** @type {?} */ _x = this.graphInitXPos;
        const /** @type {?} */ _y = this.graphInitYPos;
        return 'translate(' + String(_x) + ', ' + String(_y) + ')';
    }
    /**
     * @return {?}
     */
    get axisXLabelInitXPos() {
        const /** @type {?} */ _x = this.configData.margin.left
            + this.configData.axis.xLabel.leftMargin;
        return _x;
    }
    /**
     * @return {?}
     */
    get axisXLabelInitYPos() {
        const /** @type {?} */ _y = this.svgHeight
            - this.configData.axis.xLabel.bottomMargin;
        return _y;
    }
    /**
     * @return {?}
     */
    get axisTranslatePos() {
        const /** @type {?} */ _x = this.configData.margin.left;
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height;
        return 'translate(' + String(_x) + ', ' + String(_y) + ')';
    }
    /**
     * @return {?}
     */
    get axisXBorderLineWidth() {
        return this.configData.axis.borderLineWidth;
    }
    /**
     * @return {?}
     */
    get axisYBorderHeight() {
        const /** @type {?} */ _margin = this.configData.margin.top
            + this.configData.margin.bottom
            + this.configData.title.height;
        return this.svgHeight - _margin;
    }
    /**
     * @return {?}
     */
    get axisXBorderWidth() {
        let /** @type {?} */ _margin = this.configData.margin.left
            + this.configData.margin.right;
        if (this.configData.legend.display) {
            _margin += this.configData.legend.totalWidth;
        }
        return this.svgWidth - _margin;
    }
    /**
     * @return {?}
     */
    get axisYOrient() {
        return 'left';
    }
    /**
     * @return {?}
     */
    get axisXOrient() {
        return 'bottom';
    }
    /**
     * @return {?}
     */
    get axisXBorderTranslatePos() {
        const /** @type {?} */ sYpos = String(this.svgHeight - this.configData.margin.bottom);
        return 'translate(' + this.configData.margin.left + ', ' + sYpos + ')';
    }
    /**
     * @return {?}
     */
    get innerRadiusPercent() {
        return this.configData.pie.innerRadius.percent;
    }
    /**
     * @return {?}
     */
    get innerRadiusTitle() {
        return this.configData.pie.innerRadius.title;
    }
    /**
     * @return {?}
     */
    get innerRadiusTitleTranslatePos() {
        const /** @type {?} */ _x = this.configData.margin.left
            + this.graphWidth / 2;
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height
            + this.graphHeight / 2
            + 5;
        return 'translate(' + String(_x) + ', ' + String(_y) + ')';
    }
    /**
     * @return {?}
     */
    get legendInitXPos() {
        let /** @type {?} */ _x = this.configData.margin.left
            + this.graphWidth
            + this.configData.legend.initXPos;
        if (this.configData.legend.position !== 'right') {
            _x = this.configData.margin.left
                + this.configData.legend.initXPos;
        }
        return _x;
    }
    /**
     * @return {?}
     */
    get legendInitYPos() {
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height
            + this.configData.legend.initYPos;
        return _y;
    }
    /**
     * @return {?}
     */
    get gridYStep() {
        const /** @type {?} */ _maxY = Math.ceil(this.maxYValue / 100) * 10;
        const /** @type {?} */ _lineNum = 10;
        const /** @type {?} */ _step = Math.ceil(_maxY / _lineNum) * _lineNum;
        return _step;
    }
    /**
     * @return {?}
     */
    get gridXStep() {
        const /** @type {?} */ _maxX = Math.ceil(this.maxXValue / 100) * 10;
        const /** @type {?} */ _lineNum = 10;
        const /** @type {?} */ _step = Math.ceil(_maxX / _lineNum) * _lineNum;
        return _step;
    }
    /**
     * @return {?}
     */
    get titleInitXPos() {
        const /** @type {?} */ _x = this.configData.margin.left
            + (this.graphWidth + this.configData.legend.totalWidth) / 2
            + this.configData.title.leftMargin;
        return _x;
    }
    /**
     * @return {?}
     */
    get titleInitYPos() {
        const /** @type {?} */ _y = this.configData.margin.top
            + this.configData.title.height
            - this.configData.title.bottomMargin;
        return _y;
    }
    /**
     * @return {?}
     */
    get defaultColorFunc() {
        let /** @type {?} */ _color;
        if (this.configData.color.auto) {
            if (this.configData.color.defaultColorNumber === '20') {
                _color = d3.scaleOrdinal(d3.schemeCategory20);
            }
            else {
                _color = d3.scaleOrdinal(d3.schemeCategory10);
            }
        }
        return _color;
    }
}
function O2Common_tsickle_Closure_declarations() {
    /** @type {?} */
    O2Common.prototype.svgContainer;
    /** @type {?} */
    O2Common.prototype.configData;
    /** @type {?} */
    O2Common.prototype.autoMaxX;
    /** @type {?} */
    O2Common.prototype.autoMaxY;
    /** @type {?} */
    O2Common.prototype.svgWidth;
    /** @type {?} */
    O2Common.prototype.svgHeight;
}
export class O2LineData {
    /**
     * @param {?} data
     * @param {?} color
     * @param {?} dashedArray
     * @param {?} interpolate
     */
    constructor(data, color, dashedArray, interpolate) {
        this.data = data;
        this.color = color;
        this.dashedArray = dashedArray;
        this.interpolate = interpolate;
    }
}
function O2LineData_tsickle_Closure_declarations() {
    /** @type {?} */
    O2LineData.prototype.data;
    /** @type {?} */
    O2LineData.prototype.color;
    /** @type {?} */
    O2LineData.prototype.dashedArray;
    /** @type {?} */
    O2LineData.prototype.interpolate;
}
export class O2LegendData {
    /**
     * @param {?} title
     * @param {?} color
     */
    constructor(title, color) {
        this.title = title;
        this.color = color;
    }
}
function O2LegendData_tsickle_Closure_declarations() {
    /** @type {?} */
    O2LegendData.prototype.title;
    /** @type {?} */
    O2LegendData.prototype.color;
}
export class O2ScatterPlotData {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} r
     */
    constructor(x, y, r) {
        this.x = x;
        this.y = y;
        this.r = r;
    }
}
function O2ScatterPlotData_tsickle_Closure_declarations() {
    /** @type {?} */
    O2ScatterPlotData.prototype.x;
    /** @type {?} */
    O2ScatterPlotData.prototype.y;
    /** @type {?} */
    O2ScatterPlotData.prototype.r;
}
export class O2StackBarData {
    /**
     * @param {?} x
     * @param {?} y
     */
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
function O2StackBarData_tsickle_Closure_declarations() {
    /** @type {?} */
    O2StackBarData.prototype.x;
    /** @type {?} */
    O2StackBarData.prototype.y;
}
export class O2IdValueData {
    /**
     * @param {?} id
     * @param {?} value
     */
    constructor(id, value) {
        this.id = id;
        this.value = value;
    }
}
function O2IdValueData_tsickle_Closure_declarations() {
    /** @type {?} */
    O2IdValueData.prototype.id;
    /** @type {?} */
    O2IdValueData.prototype.value;
}
// export class O2KeyValueData {
//     constructor(
//        public key: string,
// 	   public value: number
//        ) { }
// }
// export class O2DateKVArrayData {
//     constructor(
//        public date: Date,
// 	   public kvArray: Array<O2KeyValueData>
//        ) { }
// }
// export class O2DateStKVArrayData {
//     constructor(
//        public dateSt: string,
// 	   public kvArray: Array<O2KeyValueData>
//        ) { }
// }

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibzJjb21tb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzYtbzItY2hhcnQvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL28yY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUl6QixNQUFNOzs7Ozs7Ozs7SUFFRixZQUNXLGNBQ0EsWUFDQSxVQUNBLFVBQ0EsVUFDQTtRQUxBLGlCQUFZLEdBQVosWUFBWTtRQUNaLGVBQVUsR0FBVixVQUFVO1FBQ1YsYUFBUSxHQUFSLFFBQVE7UUFDUixhQUFRLEdBQVIsUUFBUTtRQUNSLGFBQVEsR0FBUixRQUFRO1FBQ1IsY0FBUyxHQUFULFNBQVM7S0FDZjs7OztRQUtFLGFBQWE7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzs7Ozs7UUFHL0IsYUFBYTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDOzs7OztRQUcvQix3QkFBd0I7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQzs7Ozs7UUFRdEMsU0FBUztRQUNoQixxQkFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN0QztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7O1FBR04sU0FBUztRQUNoQixxQkFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FB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TUFBQyxHQUFELENBQUM7S0FDSDtDQUVQOzs7Ozs7O0FBRUQsTUFBTTs7Ozs7SUFDTixZQUNVLElBQ0M7UUFERCxPQUFFLEdBQUYsRUFBRTtRQUNELFVBQUssR0FBTCxLQUFLO0tBQ1I7Q0FFUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE8yQ29tbW9uIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgc3ZnQ29udGFpbmVyOiBhbnksXHJcbiAgICAgICAgcHVibGljIGNvbmZpZ0RhdGE6IGFueSxcclxuICAgICAgICBwdWJsaWMgYXV0b01heFg6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgYXV0b01heFk6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgc3ZnV2lkdGg6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgc3ZnSGVpZ2h0OiBudW1iZXJcclxuICAgICkgeyB9XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0gIENMQVNTIE5BTUUgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5wdWJsaWMgZ2V0IGF4aXNDbGFzc05hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ0RhdGEuY2xhc3NOYW1lLmF4aXM7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgbGluZUNsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnRGF0YS5jbGFzc05hbWUubGluZTtcclxufVxyXG5cclxucHVibGljIGdldCBheGlzWEJvcmRlckxpbmVDbGFzc05hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ0RhdGEuY2xhc3NOYW1lLmF4aXNYQm9yZGVyO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLSAgTUFYIFZBTFVFICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnB1YmxpYyBnZXQgbWF4WFZhbHVlKCk6IG51bWJlciB7XHJcbiAgICBsZXQgX21heFggPSB0aGlzLmF1dG9NYXhYO1xyXG4gICAgaWYgKCF0aGlzLmNvbmZpZ0RhdGEubWF4VmFsdWUuYXV0bykge1xyXG4gICAgICAgIF9tYXhYID0gdGhpcy5jb25maWdEYXRhLm1heFZhbHVlLng7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX21heFg7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgbWF4WVZhbHVlKCk6IG51bWJlciB7XHJcbiAgICBsZXQgX21heFkgPSB0aGlzLmF1dG9NYXhZO1xyXG4gICAgaWYgKCF0aGlzLmNvbmZpZ0RhdGEubWF4VmFsdWUuYXV0bykge1xyXG4gICAgICAgIF9tYXhZID0gdGhpcy5jb25maWdEYXRhLm1heFZhbHVlLnk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX21heFk7XHJcbn1cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLSAgR1JBUEggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnB1YmxpYyBnZXQgZ3JhcGhJbml0WFBvcygpOiBudW1iZXIge1xyXG4gICAgbGV0IF9pbnRYID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi5sZWZ0O1xyXG4gICAgaWYgKHRoaXMuY29uZmlnRGF0YS5sZWdlbmQuZGlzcGxheSAmJiB0aGlzLmNvbmZpZ0RhdGEubGVnZW5kLnBvc2l0aW9uICE9PSAncmlnaHQnKSB7XHJcbiAgICAgICAgX2ludFggPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmxlZnRcclxuICAgICAgICAgICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS5sZWdlbmQudG90YWxXaWR0aDtcclxuICAgIH1cclxuICAgIHJldHVybiBfaW50WDtcclxufVxyXG5cclxucHVibGljIGdldCBncmFwaEluaXRZUG9zKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBfaW50WSA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4udG9wXHJcbiAgICAgICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS50aXRsZS5oZWlnaHQ7XHJcbiAgICByZXR1cm4gX2ludFk7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgZ3JhcGhZU2NhbGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdyYXBoSGVpZ2h0IC8gdGhpcy5tYXhZVmFsdWU7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgZ3JhcGhYU2NhbGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdyYXBoV2lkdGggLyB0aGlzLm1heFhWYWx1ZTtcclxufVxyXG5cclxucHVibGljIGdldCBncmFwaFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICBsZXQgX21hcmdpbiA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4ubGVmdFxyXG4gICAgICAgICAgICAgICAgICsgdGhpcy5jb25maWdEYXRhLm1hcmdpbi5yaWdodDtcclxuICAgIGlmICh0aGlzLmNvbmZpZ0RhdGEubGVnZW5kLmRpc3BsYXkpIHtcclxuICAgICAgICBfbWFyZ2luICs9IHRoaXMuY29uZmlnRGF0YS5sZWdlbmQudG90YWxXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5zdmdXaWR0aCAtIF9tYXJnaW47XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgZ3JhcGhIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IF9oID0gdGhpcy5zdmdIZWlnaHRcclxuICAgICAgICAgICAgICAgIC0gdGhpcy5jb25maWdEYXRhLnRpdGxlLmhlaWdodFxyXG4gICAgICAgICAgICAgICAgLSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLnRvcFxyXG4gICAgICAgICAgICAgICAgLSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmJvdHRvbTtcclxuICAgIHJldHVybiBfaDtcclxufVxyXG5cclxucHVibGljIGdldCBncmFwaENlbnRlclBvcygpOiBhbnkge1xyXG4gICAgY29uc3QgX3h5QXJyYXk6IEFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXkoKTtcclxuICAgIGNvbnN0IF94ID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi5sZWZ0XHJcbiAgICAgICAgICAgICAgICArIHRoaXMuZ3JhcGhXaWR0aCAvIDI7XHJcbiAgICBjb25zdCBfeSA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4udG9wXHJcbiAgICAgICAgICAgICsgdGhpcy5jb25maWdEYXRhLnRpdGxlLmhlaWdodFxyXG4gICAgICAgICAgICArIHRoaXMuZ3JhcGhIZWlnaHQgLyAyO1xyXG4gICAgX3h5QXJyYXkucHVzaChfeCk7XHJcbiAgICBfeHlBcnJheS5wdXNoKF95KTtcclxuICAgIHJldHVybiBfeHlBcnJheTtcclxufVxyXG5cclxucHVibGljIGdldCBncmFwaENlbnRlclRyYW5zbGF0ZVBvcygpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgX3ggPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmxlZnRcclxuICAgICAgICAgICAgKyB0aGlzLmdyYXBoV2lkdGggLyAyO1xyXG4gICAgY29uc3QgX3kgPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLnRvcFxyXG4gICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS50aXRsZS5oZWlnaHRcclxuICAgICAgICAgICAgKyB0aGlzLmdyYXBoSGVpZ2h0IC8gMjtcclxuICAgIHJldHVybiAndHJhbnNsYXRlKCcgKyBTdHJpbmcoX3gpICsgJywgJyArIFN0cmluZyhfeSkgKyAnKSc7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgZ3JhcGhJbml0VHJhbnNsYXRlUG9zKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBfeCA9IHRoaXMuZ3JhcGhJbml0WFBvcztcclxuICAgIGNvbnN0IF95ID0gdGhpcy5ncmFwaEluaXRZUG9zO1xyXG4gICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIFN0cmluZyhfeCkgKyAnLCAnICsgU3RyaW5nKF95KSArICcpJztcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tICBBWElTICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxucHVibGljIGdldCBheGlzWExhYmVsSW5pdFhQb3MoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IF94ID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi5sZWZ0XHJcbiAgICAgICAgICAgICsgdGhpcy5jb25maWdEYXRhLmF4aXMueExhYmVsLmxlZnRNYXJnaW47XHJcbiAgICByZXR1cm4gX3g7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgYXhpc1hMYWJlbEluaXRZUG9zKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBfeSA9IHRoaXMuc3ZnSGVpZ2h0XHJcbiAgICAgICAgICAgIC0gdGhpcy5jb25maWdEYXRhLmF4aXMueExhYmVsLmJvdHRvbU1hcmdpbjtcclxuICAgIHJldHVybiBfeTtcclxufVxyXG5cclxucHVibGljIGdldCBheGlzVHJhbnNsYXRlUG9zKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBfeCA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4ubGVmdDtcclxuICAgIGNvbnN0IF95ID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi50b3BcclxuICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEudGl0bGUuaGVpZ2h0O1xyXG4gICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIFN0cmluZyhfeCkgKyAnLCAnICsgU3RyaW5nKF95KSArICcpJztcclxufVxyXG5cclxuXHJcbnB1YmxpYyBnZXQgYXhpc1hCb3JkZXJMaW5lV2lkdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ0RhdGEuYXhpcy5ib3JkZXJMaW5lV2lkdGg7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgYXhpc1lCb3JkZXJIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IF9tYXJnaW4gPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLnRvcFxyXG4gICAgICAgICAgICAgICAgICAgICsgdGhpcy5jb25maWdEYXRhLm1hcmdpbi5ib3R0b21cclxuICAgICAgICAgICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS50aXRsZS5oZWlnaHQ7XHJcbiAgICByZXR1cm4gdGhpcy5zdmdIZWlnaHQgLSBfbWFyZ2luO1xyXG59XHJcblxyXG5wdWJsaWMgZ2V0IGF4aXNYQm9yZGVyV2lkdGgoKTogbnVtYmVyIHtcclxuICAgIGxldCBfbWFyZ2luID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi5sZWZ0XHJcbiAgICAgICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLnJpZ2h0O1xyXG4gICAgaWYgKHRoaXMuY29uZmlnRGF0YS5sZWdlbmQuZGlzcGxheSkge1xyXG4gICAgICAgIF9tYXJnaW4gKz0gdGhpcy5jb25maWdEYXRhLmxlZ2VuZC50b3RhbFdpZHRoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuc3ZnV2lkdGggLSBfbWFyZ2luO1xyXG59XHJcblxyXG5wdWJsaWMgZ2V0IGF4aXNZT3JpZW50KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ2xlZnQnO1xyXG59XHJcblxyXG5wdWJsaWMgZ2V0IGF4aXNYT3JpZW50KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gJ2JvdHRvbSc7XHJcbn1cclxucHVibGljIGdldCBheGlzWEJvcmRlclRyYW5zbGF0ZVBvcygpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgc1lwb3MgPSBTdHJpbmcodGhpcy5zdmdIZWlnaHQgLSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmJvdHRvbSk7XHJcbiAgICByZXR1cm4gJ3RyYW5zbGF0ZSgnICsgdGhpcy5jb25maWdEYXRhLm1hcmdpbi5sZWZ0ICsgJywgJyArIHNZcG9zICsgJyknO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLSAgUkFESVVTICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxucHVibGljIGdldCBpbm5lclJhZGl1c1BlcmNlbnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmZpZ0RhdGEucGllLmlubmVyUmFkaXVzLnBlcmNlbnQ7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgaW5uZXJSYWRpdXNUaXRsZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnRGF0YS5waWUuaW5uZXJSYWRpdXMudGl0bGU7XHJcbn1cclxuXHJcbnB1YmxpYyBnZXQgaW5uZXJSYWRpdXNUaXRsZVRyYW5zbGF0ZVBvcygpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgX3ggPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmxlZnRcclxuICAgICAgICAgICAgICAgICsgdGhpcy5ncmFwaFdpZHRoIC8gMjtcclxuICAgIGNvbnN0IF95ID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi50b3BcclxuICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEudGl0bGUuaGVpZ2h0XHJcbiAgICAgICAgICAgICsgdGhpcy5ncmFwaEhlaWdodCAvIDJcclxuICAgICAgICAgICAgKyA1O1xyXG4gICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIFN0cmluZyhfeCkgKyAnLCAnICsgU3RyaW5nKF95KSArICcpJztcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tICBMRUdFTkQgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5wdWJsaWMgZ2V0IGxlZ2VuZEluaXRYUG9zKCk6IG51bWJlciB7XHJcbiAgICBsZXQgX3ggPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLmxlZnRcclxuICAgICAgICAgICAgICAgICsgdGhpcy5ncmFwaFdpZHRoXHJcbiAgICAgICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS5sZWdlbmQuaW5pdFhQb3MgO1xyXG4gICAgaWYgKHRoaXMuY29uZmlnRGF0YS5sZWdlbmQucG9zaXRpb24gIT09ICdyaWdodCcpIHtcclxuICAgICAgICBfeCA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4ubGVmdFxyXG4gICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEubGVnZW5kLmluaXRYUG9zIDtcclxuICAgIH1cclxuICAgIHJldHVybiBfeDtcclxufVxyXG5cclxucHVibGljIGdldCBsZWdlbmRJbml0WVBvcygpOiBudW1iZXIge1xyXG4gICAgY29uc3QgX3kgPSB0aGlzLmNvbmZpZ0RhdGEubWFyZ2luLnRvcFxyXG4gICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS50aXRsZS5oZWlnaHRcclxuICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEubGVnZW5kLmluaXRZUG9zO1xyXG4gICAgcmV0dXJuIF95O1xyXG59XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0gIEdSSUQgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5wdWJsaWMgZ2V0IGdyaWRZU3RlcCgpOiBudW1iZXIge1xyXG4gICAgY29uc3QgX21heFkgPSBNYXRoLmNlaWwodGhpcy5tYXhZVmFsdWUgLyAxMDApICogMTA7XHJcbiAgICBjb25zdCBfbGluZU51bSA9IDEwO1xyXG4gICAgY29uc3QgX3N0ZXAgPSBNYXRoLmNlaWwoX21heFkgLyBfbGluZU51bSkgKiBfbGluZU51bTtcclxuICAgIHJldHVybiBfc3RlcDtcclxufVxyXG5cclxucHVibGljIGdldCBncmlkWFN0ZXAoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IF9tYXhYID0gTWF0aC5jZWlsKHRoaXMubWF4WFZhbHVlIC8gMTAwKSAqIDEwO1xyXG4gICAgY29uc3QgX2xpbmVOdW0gPSAxMDtcclxuICAgIGNvbnN0IF9zdGVwID0gTWF0aC5jZWlsKF9tYXhYIC8gX2xpbmVOdW0pICogX2xpbmVOdW07XHJcbiAgICByZXR1cm4gX3N0ZXA7XHJcbn1cclxuXHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0gIFRJVExFICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxucHVibGljIGdldCB0aXRsZUluaXRYUG9zKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCBfeCA9IHRoaXMuY29uZmlnRGF0YS5tYXJnaW4ubGVmdFxyXG4gICAgICAgICAgICArICh0aGlzLmdyYXBoV2lkdGggKyB0aGlzLmNvbmZpZ0RhdGEubGVnZW5kLnRvdGFsV2lkdGgpIC8gMlxyXG4gICAgICAgICAgICArIHRoaXMuY29uZmlnRGF0YS50aXRsZS5sZWZ0TWFyZ2luO1xyXG4gICAgcmV0dXJuIF94O1xyXG59XHJcblxyXG5wdWJsaWMgZ2V0IHRpdGxlSW5pdFlQb3MoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IF95ID0gdGhpcy5jb25maWdEYXRhLm1hcmdpbi50b3BcclxuICAgICAgICAgICAgKyB0aGlzLmNvbmZpZ0RhdGEudGl0bGUuaGVpZ2h0XHJcbiAgICAgICAgICAgIC0gdGhpcy5jb25maWdEYXRhLnRpdGxlLmJvdHRvbU1hcmdpbjtcclxuICAgIHJldHVybiBfeTtcclxufVxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tICBDT0xPUiAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnB1YmxpYyBnZXQgZGVmYXVsdENvbG9yRnVuYygpOiBhbnkge1xyXG4gICAgbGV0IF9jb2xvcjogYW55O1xyXG4gICAgaWYgKHRoaXMuY29uZmlnRGF0YS5jb2xvci5hdXRvICkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ0RhdGEuY29sb3IuZGVmYXVsdENvbG9yTnVtYmVyID09PSAnMjAnKSB7XHJcbiAgICAgICAgICAgIF9jb2xvciA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTIwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBfY29sb3IgPSBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9jb2xvcjtcclxufVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTzJMaW5lRGF0YSB7XHJcbmNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIGRhdGE6IEFycmF5PG51bWJlcj4sXHJcbiAgICBwdWJsaWMgY29sb3I6IHN0cmluZyxcclxuICAgIHB1YmxpYyBkYXNoZWRBcnJheTogc3RyaW5nLFxyXG4gICAgcHVibGljIGludGVycG9sYXRlOiBzdHJpbmdcclxuICAgICkgeyB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTzJMZWdlbmREYXRhIHtcclxuY29uc3RydWN0b3IoXHJcbiAgIHB1YmxpYyB0aXRsZTogc3RyaW5nLFxyXG4gICAgcHVibGljIGNvbG9yOiBzdHJpbmcgKSB7IH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPMlNjYXR0ZXJQbG90RGF0YSB7XHJcbmNvbnN0cnVjdG9yKFxyXG4gICBwdWJsaWMgeDogbnVtYmVyLFxyXG4gICBwdWJsaWMgeTogbnVtYmVyLFxyXG4gICBwdWJsaWMgcjogbnVtYmVyICkgeyB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTzJTdGFja0JhckRhdGEge1xyXG5jb25zdHJ1Y3RvcihcclxuICAgcHVibGljIHg6IHN0cmluZyxcclxuICAgcHVibGljIHk6IG51bWJlclxyXG4gICApIHsgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE8ySWRWYWx1ZURhdGEge1xyXG5jb25zdHJ1Y3RvcihcclxuICAgcHVibGljIGlkOiBudW1iZXIsXHJcbiAgICBwdWJsaWMgdmFsdWU6IG51bWJlclxyXG4gICApIHsgfVxyXG5cclxufVxyXG5cclxuLy8gZXhwb3J0IGNsYXNzIE8yS2V5VmFsdWVEYXRhIHtcclxuLy8gICAgIGNvbnN0cnVjdG9yKFxyXG4vLyAgICAgICAgcHVibGljIGtleTogc3RyaW5nLFxyXG4vLyBcdCAgIHB1YmxpYyB2YWx1ZTogbnVtYmVyXHJcbi8vICAgICAgICApIHsgfVxyXG4vLyB9XHJcbi8vIGV4cG9ydCBjbGFzcyBPMkRhdGVLVkFycmF5RGF0YSB7XHJcbi8vICAgICBjb25zdHJ1Y3RvcihcclxuLy8gICAgICAgIHB1YmxpYyBkYXRlOiBEYXRlLFxyXG4vLyBcdCAgIHB1YmxpYyBrdkFycmF5OiBBcnJheTxPMktleVZhbHVlRGF0YT5cclxuLy8gICAgICAgICkgeyB9XHJcbi8vIH1cclxuLy8gZXhwb3J0IGNsYXNzIE8yRGF0ZVN0S1ZBcnJheURhdGEge1xyXG4vLyAgICAgY29uc3RydWN0b3IoXHJcbi8vICAgICAgICBwdWJsaWMgZGF0ZVN0OiBzdHJpbmcsXHJcbi8vIFx0ICAgcHVibGljIGt2QXJyYXk6IEFycmF5PE8yS2V5VmFsdWVEYXRhPlxyXG4vLyAgICAgICAgKSB7IH1cclxuLy8gfSJdfQ==