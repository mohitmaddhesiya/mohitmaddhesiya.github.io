{"version":3,"sources":["ng://ng6-o2-chart/lib/shared/chart-const.ts","ng://ng6-o2-chart/lib/shared/o2common.ts","ng://ng6-o2-chart/lib/ng6-o2-chart.component.ts","ng://ng6-o2-chart/lib/ng6-o2-chart.module.ts"],"names":["LINE_CHART_TYPE_NAME","BAR_CHART_TYPE_NAME","PIE_CHART_TYPE_NAME","SCATTER_PLOT_CHART_TYPE_NAME","HISTOGRAM_CHART_TYPE_NAME","STACK_BAR_CHART_TYPE_NAME","GEO_MAP_CHART_TYPE_NAME","GEO_ORTHOGRAPHIC_CHART_TYPE_NAME","TREE_MAP_CHART_TYPE_NAME","PACK_LAYOUT_CHART_TYPE_NAME","CHOROPLETH_CHART_TYPE_NAME","TREE_CHART_TYPE_NAME","SANKEY_CHART_TYPE_NAME","FORCE_CHART_TYPE_NAME","O2Common","svgContainer","configData","autoMaxX","autoMaxY","svgWidth","svgHeight","this","prototype","className","axis","line","axisXBorder","_maxX","maxValue","auto","x","_maxY","y","_intX","margin","left","legend","display","position","totalWidth","top","title","height","graphHeight","maxYValue","graphWidth","maxXValue","_margin","right","bottom","_xyArray","Array","_x","_y","push","String","graphInitXPos","graphInitYPos","xLabel","leftMargin","bottomMargin","borderLineWidth","sYpos","pie","innerRadius","percent","initXPos","initYPos","Math","ceil","_color","color","defaultColorNumber","d3.scaleOrdinal","d3.schemeCategory20","d3.schemeCategory10","O2LegendData","O2ScatterPlotData","r","O2IdValueData","id","value","Ng6O2ChartComponent","elementRef","console","log","el","nativeElement","root","d3.select","ngOnInit","ngOnChanges","changes","parseInt","dataSet","graphData","chartType","append","attr","ChartConst.LINE_CHART_TYPE_NAME","buildLine","ChartConst.BAR_CHART_TYPE_NAME","buildBar","ChartConst.PIE_CHART_TYPE_NAME","buildPie","ChartConst.SCATTER_PLOT_CHART_TYPE_NAME","buildScatterPlot","ChartConst.HISTOGRAM_CHART_TYPE_NAME","buildHistogram","ChartConst.STACK_BAR_CHART_TYPE_NAME","buildStackBar","ChartConst.GEO_MAP_CHART_TYPE_NAME","buildGeoMap","ChartConst.GEO_ORTHOGRAPHIC_CHART_TYPE_NAME","buildGeoOrthographic","ChartConst.TREE_CHART_TYPE_NAME","buildTree","ChartConst.PACK_LAYOUT_CHART_TYPE_NAME","buildPackLayout","ChartConst.CHOROPLETH_CHART_TYPE_NAME","buildChoropleth","ChartConst.FORCE_CHART_TYPE_NAME","buildForce","dataSetJson","data","_binNumber","bins","length","range","cdt","_graphWidth","_graphHeight","_graphInitX","_graphInitY","_titleDisplay","_animation","animation","enable","_animationDuration","duration","_gridYDisplay","grid","_className","histogramBar","_dataSet","i","hasOwnProperty","_num","formatCount","d3.format","_histgramContainer","_xScale","d3.scaleLinear","rangeRound","d3.histogram","domain","thresholds","ticks","_yScale","d3.max","d","bar","selectAll","enter","x0","x1","transition","text","drawTitle","buildYAxis","buildXAxis","drawYGrid","defaultColorFunc","_marginLeft","_marginTop","simulation","d3.forceSimulation","force","d3.forceLink","d3.forceManyBody","d3.forceCenter","_forceContainer","link","links","sqrt","node","nodes","group","call","d3.drag","on","d3.event","active","alphaTarget","restart","fx","fy","source","target","_legendDataSet","groups","_id","name","buildLegend","_graphCenterPos","graphCenterPos","_legendDisplay","_focusColor","focusColor","_scale","map","scale","_targetName","targetName","_keyDataName","keyDataName","_keyName","_geoMapDataUrl","baseGeoDataUrl","_startColor","startColor","_endColor","endColor","_colorNum","colorNumber","_center","center","_targetPropertyName","targetPropertyName","_targetProperty","d3.interpolateHsl","_max","_min","_range","_step","_findColorById","_value","_rate","path","d3.geoPath","projection","d3.geoMercator","translate","d3.json","error","eval","style","_cl","_label","packlayout","_packlayoutLabelClass","packlayoutLabel","bubble","d3.pack","size","nodes0","d3.hierarchy","pack","descendants","_circle","depth","_text","treemap","treemapLabel","d3.tree","tree","_treeContainer","slice","parent","children","_clipAngle","clipAngle","_rotateH","rotate","horizontal","_rotateV","vertical","_oceanColor","oceanColor","_antarcticaColor","antarcticaColor","_animationH","_findColorByName","targetPath","d3.geoOrthographic","earthPath","_targetArea","d3.timer","_name","_totalY","k","j","_columnNum","_barWidth","between","_columnWidth","_initPosX","_maxYValue","_opacity","opacity","_gridXDisplay","_labelDisplay","label","_seriesDateName","series","_keyArray","_key","_dateArray","_xValue","_hashArray","_hashNumber","yScale","stack","d3.stack","_rect","keys","nm","_yValue","drawXBaseLine","_labelArray","drawXAxisLabel","_scatterPlotData","_seriesNumber","drawXGrid","o2Common","_stepX","gridXStep","_graphXScale","graphYScale","graphXScale","_gridClassName","_rangeX","d3.range","_axisXScale","axisClassName","axisXBorderTranslatePos","d3.axisBottom","_innerRadiusPercent","innerRadiusPercent","_graphCenterTranslatePos","graphCenterTranslatePos","_pieClassName","_pieValueClassName","pieNum","_pieInnerTitleClassName","pieInnerTitle","_innerRadiusTitleTranslatePos","innerRadiusTitleTranslatePos","_innerRadiusTitle","innerRadiusTitle","_valueDisplay","_percentDisplay","_sum","d3.sum","d3.pie","arc","d3.arc","outerRadius","pieElements","centroid","_percentSt","_yDataSet","_barValueClass","barValue","_seriesNum","_initPosY","_leftMargin","_betweenMargin","_graphYScale","yBarScale","_barPadding","grpGraph","_groupMaxY","_gMaxY","_lineArray","idValue","num","drawSingleLine","lineNum","axisXLabelInitXPos","axisXLabelInitYPos","_lineClassName","multiLinePrefix","_bottomMargin","d3.line","curve","d3.curveLinear","legendRectSize","rectWidth","ySpacing","initPosX","legendInitXPos","initPosY","legendInitYPos","grpLegend","labelDataSet","_initXPos","_initYPos","axisXText","axisXBorderLineClassName","axisXBorderWidth","axisXBorderLineWidth","_axisYScale","axisTranslatePos","d3.axisLeft","_title","_xPos","titleInitXPos","_yPos","titleInitYPos","_titleClassName","_stepY","gridYStep","_rangeY","Component","args","selector","template","styles","ElementRef","Input","Ng6O2ChartModule","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["export const LINE_CHART_TYPE_NAME  = 'line';\r\nexport const BAR_CHART_TYPE_NAME = 'bar';\r\nexport const PIE_CHART_TYPE_NAME = 'pie';\r\nexport const SCATTER_PLOT_CHART_TYPE_NAME = 'scatterPlot';\r\nexport const HISTOGRAM_CHART_TYPE_NAME = 'histogram';\r\nexport const STACK_BAR_CHART_TYPE_NAME = 'stackBar';\r\nexport const GEO_MAP_CHART_TYPE_NAME = 'geoMap';\r\nexport const GEO_ORTHOGRAPHIC_CHART_TYPE_NAME = 'geoOrthographic';\r\nexport const TREE_MAP_CHART_TYPE_NAME = 'treeMap';\r\nexport const PACK_LAYOUT_CHART_TYPE_NAME = 'packLayout';\r\nexport const CHOROPLETH_CHART_TYPE_NAME = 'choropleth';\r\nexport const TREE_CHART_TYPE_NAME = 'tree';\r\nexport const SANKEY_CHART_TYPE_NAME = 'sankey';\r\nexport const FORCE_CHART_TYPE_NAME = 'force' ;\r\n","import * as d3 from 'd3';\r\n\r\n\r\n\r\nexport class O2Common {\r\n\r\n    constructor(\r\n        public svgContainer: any,\r\n        public configData: any,\r\n        public autoMaxX: number,\r\n        public autoMaxY: number,\r\n        public svgWidth: number,\r\n        public svgHeight: number\r\n    ) { }\r\n\r\n// -------------------------------------------\r\n// ----  CLASS NAME  -------------------------\r\n// -------------------------------------------\r\npublic get axisClassName(): string {\r\n    return this.configData.className.axis;\r\n}\r\n\r\npublic get lineClassName(): string {\r\n    return this.configData.className.line;\r\n}\r\n\r\npublic get axisXBorderLineClassName(): string {\r\n    return this.configData.className.axisXBorder;\r\n}\r\n\r\n\r\n\r\n// -------------------------------------------\r\n// ----  MAX VALUE  --------------------------\r\n// -------------------------------------------\r\npublic get maxXValue(): number {\r\n    let _maxX = this.autoMaxX;\r\n    if (!this.configData.maxValue.auto) {\r\n        _maxX = this.configData.maxValue.x;\r\n    }\r\n    return _maxX;\r\n}\r\n\r\npublic get maxYValue(): number {\r\n    let _maxY = this.autoMaxY;\r\n    if (!this.configData.maxValue.auto) {\r\n        _maxY = this.configData.maxValue.y;\r\n    }\r\n    return _maxY;\r\n}\r\n\r\n// -------------------------------------------\r\n// ----  GRAPH -------------------------------\r\n// -------------------------------------------\r\npublic get graphInitXPos(): number {\r\n    let _intX = this.configData.margin.left;\r\n    if (this.configData.legend.display && this.configData.legend.position !== 'right') {\r\n        _intX = this.configData.margin.left\r\n                    + this.configData.legend.totalWidth;\r\n    }\r\n    return _intX;\r\n}\r\n\r\npublic get graphInitYPos(): number {\r\n    const _intY = this.configData.margin.top\r\n                + this.configData.title.height;\r\n    return _intY;\r\n}\r\n\r\npublic get graphYScale(): number {\r\n    return this.graphHeight / this.maxYValue;\r\n}\r\n\r\npublic get graphXScale(): number {\r\n    return this.graphWidth / this.maxXValue;\r\n}\r\n\r\npublic get graphWidth(): number {\r\n    let _margin = this.configData.margin.left\r\n                 + this.configData.margin.right;\r\n    if (this.configData.legend.display) {\r\n        _margin += this.configData.legend.totalWidth;\r\n    }\r\n\r\n    return this.svgWidth - _margin;\r\n}\r\n\r\npublic get graphHeight(): number {\r\n    const _h = this.svgHeight\r\n                - this.configData.title.height\r\n                - this.configData.margin.top\r\n                - this.configData.margin.bottom;\r\n    return _h;\r\n}\r\n\r\npublic get graphCenterPos(): any {\r\n    const _xyArray: Array<number> = new Array();\r\n    const _x = this.configData.margin.left\r\n                + this.graphWidth / 2;\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height\r\n            + this.graphHeight / 2;\r\n    _xyArray.push(_x);\r\n    _xyArray.push(_y);\r\n    return _xyArray;\r\n}\r\n\r\npublic get graphCenterTranslatePos(): string {\r\n    const _x = this.configData.margin.left\r\n            + this.graphWidth / 2;\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height\r\n            + this.graphHeight / 2;\r\n    return 'translate(' + String(_x) + ', ' + String(_y) + ')';\r\n}\r\n\r\npublic get graphInitTranslatePos(): string {\r\n    const _x = this.graphInitXPos;\r\n    const _y = this.graphInitYPos;\r\n    return 'translate(' + String(_x) + ', ' + String(_y) + ')';\r\n}\r\n\r\n// -------------------------------------------\r\n// ----  AXIS  -------------------------------\r\n// -------------------------------------------\r\npublic get axisXLabelInitXPos(): number {\r\n    const _x = this.configData.margin.left\r\n            + this.configData.axis.xLabel.leftMargin;\r\n    return _x;\r\n}\r\n\r\npublic get axisXLabelInitYPos(): number {\r\n    const _y = this.svgHeight\r\n            - this.configData.axis.xLabel.bottomMargin;\r\n    return _y;\r\n}\r\n\r\npublic get axisTranslatePos(): string {\r\n    const _x = this.configData.margin.left;\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height;\r\n    return 'translate(' + String(_x) + ', ' + String(_y) + ')';\r\n}\r\n\r\n\r\npublic get axisXBorderLineWidth(): number {\r\n    return this.configData.axis.borderLineWidth;\r\n}\r\n\r\npublic get axisYBorderHeight(): number {\r\n    const _margin = this.configData.margin.top\r\n                    + this.configData.margin.bottom\r\n                    + this.configData.title.height;\r\n    return this.svgHeight - _margin;\r\n}\r\n\r\npublic get axisXBorderWidth(): number {\r\n    let _margin = this.configData.margin.left\r\n                 + this.configData.margin.right;\r\n    if (this.configData.legend.display) {\r\n        _margin += this.configData.legend.totalWidth;\r\n    }\r\n    return this.svgWidth - _margin;\r\n}\r\n\r\npublic get axisYOrient(): string {\r\n    return 'left';\r\n}\r\n\r\npublic get axisXOrient(): string {\r\n    return 'bottom';\r\n}\r\npublic get axisXBorderTranslatePos(): string {\r\n    const sYpos = String(this.svgHeight - this.configData.margin.bottom);\r\n    return 'translate(' + this.configData.margin.left + ', ' + sYpos + ')';\r\n}\r\n\r\n\r\n\r\n// -------------------------------------------\r\n// ----  RADIUS  -------------------------------\r\n// -------------------------------------------\r\npublic get innerRadiusPercent(): number {\r\n    return this.configData.pie.innerRadius.percent;\r\n}\r\n\r\npublic get innerRadiusTitle(): string {\r\n    return this.configData.pie.innerRadius.title;\r\n}\r\n\r\npublic get innerRadiusTitleTranslatePos(): string {\r\n    const _x = this.configData.margin.left\r\n                + this.graphWidth / 2;\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height\r\n            + this.graphHeight / 2\r\n            + 5;\r\n    return 'translate(' + String(_x) + ', ' + String(_y) + ')';\r\n}\r\n\r\n// -------------------------------------------\r\n// ----  LEGEND  -------------------------------\r\n// -------------------------------------------\r\npublic get legendInitXPos(): number {\r\n    let _x = this.configData.margin.left\r\n                + this.graphWidth\r\n                + this.configData.legend.initXPos ;\r\n    if (this.configData.legend.position !== 'right') {\r\n        _x = this.configData.margin.left\r\n             + this.configData.legend.initXPos ;\r\n    }\r\n    return _x;\r\n}\r\n\r\npublic get legendInitYPos(): number {\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height\r\n            + this.configData.legend.initYPos;\r\n    return _y;\r\n}\r\n\r\n// -------------------------------------------\r\n// ----  GRID  -------------------------------\r\n// -------------------------------------------\r\npublic get gridYStep(): number {\r\n    const _maxY = Math.ceil(this.maxYValue / 100) * 10;\r\n    const _lineNum = 10;\r\n    const _step = Math.ceil(_maxY / _lineNum) * _lineNum;\r\n    return _step;\r\n}\r\n\r\npublic get gridXStep(): number {\r\n    const _maxX = Math.ceil(this.maxXValue / 100) * 10;\r\n    const _lineNum = 10;\r\n    const _step = Math.ceil(_maxX / _lineNum) * _lineNum;\r\n    return _step;\r\n}\r\n\r\n\r\n// -------------------------------------------\r\n// ----  TITLE  -------------------------------\r\n// -------------------------------------------\r\npublic get titleInitXPos(): number {\r\n    const _x = this.configData.margin.left\r\n            + (this.graphWidth + this.configData.legend.totalWidth) / 2\r\n            + this.configData.title.leftMargin;\r\n    return _x;\r\n}\r\n\r\npublic get titleInitYPos(): number {\r\n    const _y = this.configData.margin.top\r\n            + this.configData.title.height\r\n            - this.configData.title.bottomMargin;\r\n    return _y;\r\n}\r\n\r\n// -------------------------------------------\r\n// ----  COLOR  -------------------------------\r\n// -------------------------------------------\r\npublic get defaultColorFunc(): any {\r\n    let _color: any;\r\n    if (this.configData.color.auto ) {\r\n        if (this.configData.color.defaultColorNumber === '20') {\r\n            _color = d3.scaleOrdinal(d3.schemeCategory20);\r\n        } else {\r\n            _color = d3.scaleOrdinal(d3.schemeCategory10);\r\n        }\r\n    }\r\n    return _color;\r\n}\r\n}\r\n\r\nexport class O2LineData {\r\nconstructor(\r\n    public data: Array<number>,\r\n    public color: string,\r\n    public dashedArray: string,\r\n    public interpolate: string\r\n    ) { }\r\n}\r\n\r\n\r\nexport class O2LegendData {\r\nconstructor(\r\n   public title: string,\r\n    public color: string ) { }\r\n\r\n}\r\n\r\nexport class O2ScatterPlotData {\r\nconstructor(\r\n   public x: number,\r\n   public y: number,\r\n   public r: number ) { }\r\n\r\n}\r\n\r\nexport class O2StackBarData {\r\nconstructor(\r\n   public x: string,\r\n   public y: number\r\n   ) { }\r\n\r\n}\r\n\r\nexport class O2IdValueData {\r\nconstructor(\r\n   public id: number,\r\n    public value: number\r\n   ) { }\r\n\r\n}\r\n\r\n// export class O2KeyValueData {\r\n//     constructor(\r\n//        public key: string,\r\n// \t   public value: number\r\n//        ) { }\r\n// }\r\n// export class O2DateKVArrayData {\r\n//     constructor(\r\n//        public date: Date,\r\n// \t   public kvArray: Array<O2KeyValueData>\r\n//        ) { }\r\n// }\r\n// export class O2DateStKVArrayData {\r\n//     constructor(\r\n//        public dateSt: string,\r\n// \t   public kvArray: Array<O2KeyValueData>\r\n//        ) { }\r\n// }","import {Component, Directive, Input, OnInit, Inject, ElementRef } from '@angular/core';\nimport {Output, OnChanges, SimpleChange} from '@angular/core';\nimport {O2Common, O2LegendData, O2ScatterPlotData, O2StackBarData, O2LineData, O2IdValueData} from './shared/o2common';\n\nimport * as ChartConst from './shared/chart-const';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'lib-Ng6O2Chart',\n  template: ``,\n  styles: []\n})\nexport class Ng6O2ChartComponent implements  OnInit , OnChanges {\n  @Input() chartType: string;\n  @Input() svgWidth: string;\n  @Input() svgHeight: string;\n  @Input() graphData: Array<number>;\n  @Input() configData: any;\n  root: any;\n\n  constructor( elementRef: ElementRef ) {\n    console.log('el:HTMLElement-------------------');\n    const el: HTMLElement    = elementRef.nativeElement;\n    this.root = d3.select(el);\n}\n\nngOnInit() {\n}\n\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n  const svgWidth = parseInt(this.svgWidth, 10);\n  const svgHeight = parseInt(this.svgHeight, 10);\n  const dataSet = this.graphData;\n  const configData = this.configData;\n  const chartType = this.chartType;\n  const svgContainer = this.root.append('svg')\n            .attr('width', svgWidth)\n            .attr('height', svgHeight);\n\n  console.log(chartType);\n  switch (chartType) {\n    case ChartConst.LINE_CHART_TYPE_NAME:\n      this.buildLine(svgContainer, configData, dataSet, svgWidth, svgHeight);\n      break;\n    case ChartConst.BAR_CHART_TYPE_NAME:\n      this.buildBar(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.PIE_CHART_TYPE_NAME:\n      this.buildPie(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.SCATTER_PLOT_CHART_TYPE_NAME:\n      this.buildScatterPlot(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.HISTOGRAM_CHART_TYPE_NAME:\n      this.buildHistogram(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.STACK_BAR_CHART_TYPE_NAME:\n      this.buildStackBar(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.GEO_MAP_CHART_TYPE_NAME:\n      this.buildGeoMap(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.GEO_ORTHOGRAPHIC_CHART_TYPE_NAME:\n      this.buildGeoOrthographic(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.TREE_CHART_TYPE_NAME:\n      this.buildTree(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.PACK_LAYOUT_CHART_TYPE_NAME:\n      this.buildPackLayout(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.CHOROPLETH_CHART_TYPE_NAME:\n      this.buildChoropleth(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.FORCE_CHART_TYPE_NAME:\n      this.buildForce(svgContainer, configData, dataSet, svgWidth, svgHeight );\n      break;\n    case ChartConst.TREE_MAP_CHART_TYPE_NAME:\n      //  this.buildTreeMap(svgContainer,configData, dataSet,svgWidth,svgHeight );\n      break;\n    case ChartConst.SANKEY_CHART_TYPE_NAME:\n      //  this.buildSankey(svgContainer,configData, dataSet,svgWidth,svgHeight );\n      break;\n    default:\n      break;\n  }\n}\n\n\n\nprivate buildHistogram(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildHistogram-------------------');\n\n  const dataSet = dataSetJson.data;\n  const _binNumber = dataSetJson.bins.length - 1;\n\n  const _maxY = 300; // dummy number\n  const _maxX = dataSetJson.range[1];\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n  const _graphWidth = cdt.graphWidth;\n  const _graphHeight = cdt.graphHeight;\n  const _maxYValue = cdt.maxYValue;\n  const _graphXScale = cdt.graphXScale;\n  const _graphInitX = cdt.graphInitXPos;\n  const _graphInitY = cdt.graphInitYPos;\n\n  const _titleDisplay = configData.title.display;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n  const _gridYDisplay = configData.grid.y.display;\n  const _marginLeft = configData.margin.left;\n  const _marginTop = configData.margin.top;\n  const _className = configData.className.histogramBar;\n\n\n  const _dataSet: Array<number> = new Array();\n  for (const i in dataSet) {\n      if (dataSet.hasOwnProperty(i)) {\n          const _num = dataSet[i] / _maxX;\n          _dataSet.push(_num);\n      }\n  }\n\n  const formatCount = d3.format(',.0f');\n\n  const _histgramContainer = svgContainer\n                  .append('g')\n                  .attr('transform', 'translate(' + _graphInitX + ',' + _graphInitY + ')');\n\n  const _xScale = d3.scaleLinear()\n      .rangeRound([0, _graphWidth]);\n\n  const bins = d3.histogram()\n      .domain([0, 1])\n      .thresholds(_xScale.ticks(_binNumber))\n      (_dataSet);\n\n\n  const _yScale = d3.scaleLinear()\n      .domain([0, d3.max(bins, (d: any) => {\n          return d.length;\n      })])\n      .range([_graphHeight, 0]);\n\n  const bar = _histgramContainer\n      .selectAll('.bar')\n      .data(bins)\n      .enter()\n      .append('g')\n      .attr('class', _className)\n      .attr('transform', (d: any) => {\n          return 'translate(' + _xScale(d.x0) + ',' + _yScale(d.length) + ')';\n      });\n\n  if (_animation) {\n      bar.append('rect')\n          .attr('x',  1)\n          .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)\n          .attr('height', 0)\n          .transition()\n          .duration(_animationDuration)\n          .attr('height', (d: any) => {\n              return _graphHeight - _yScale(d.length);\n          });\n  } else {\n      bar.append('rect')\n          .attr('x', 1)\n          .attr('width', _xScale(bins[0].x1) - _xScale(bins[0].x0) - 1)\n          .attr('height', (d: any) => {\n              return _graphHeight - _yScale(d.length);\n          });\n  }\n\n  bar.append('text')\n      .attr('dy', '.75em')\n      .attr('y', 6)\n      .attr('x', (_xScale(bins[0].x1) - _xScale(bins[0].x0)) / 2)\n      .attr('text-anchor', 'middle')\n      .text((d: any) => {\n          return formatCount(d.length);\n      });\n\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n  // ------------------------------------\n  // ---CALL buildAxis-----------------\n  this.buildYAxis(cdt);\n\n  this.buildXAxis(cdt);\n\n   if (_gridYDisplay) {\n      this.drawYGrid(cdt);\n  }\n}\n\n\n\nprivate buildForce(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('In  buildFoce----------------');\n\n  const _maxX = 100;\n  const _maxY = 100;\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _color = cdt.defaultColorFunc;\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n  const _centerPos = cdt.graphCenterPos;\n  const _graphHeight = cdt.graphHeight;\n  const _graphWidth = cdt.graphWidth;\n\n  const _marginLeft = configData.margin.left;\n  const _marginTop = configData.margin.top;\n\n\n  const simulation = d3.forceSimulation()\n      .force('link', d3.forceLink().id((d: any) => {\n          return d.id;\n      }))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(_graphWidth / 2, _graphHeight / 2));\n\n\n  const _forceContainer = svgContainer\n    .append('g')\n    .attr('transform',\n      'translate(' + _marginLeft + ',' + _marginTop + ')');\n\n  const link = _forceContainer.append('g')\n      .attr('class', 'force-links')\n      .selectAll('line')\n      .data(dataSetJson.links)\n      .enter()\n      .append('line')\n      .attr('stroke-width', (d: any) => {\n          return Math.sqrt(d.value);\n      });\n\n  const node = _forceContainer.append('g')\n      .attr('class', 'nodes')\n      .selectAll('circle')\n      .data(dataSetJson.nodes)\n      .enter()\n      .append('circle')\n      .attr('r', 5)\n      .attr('fill', (d: any) => {\n          return _color(d.group);\n      })\n      .call(d3.drag()\n          .on('start', dragstarted)\n          .on('drag', dragged)\n          .on('end', dragended));\n\n      node.append('title')\n          .text((d: any) => {\n              return d.id;\n          });\n\n  simulation\n      .nodes(dataSetJson.nodes)\n      .on('tick', ticked);\n\n  const _forceLink: any = simulation.force('link');\n  _forceLink.links(dataSetJson.links);\n\n  function ticked() {\n      link\n          .attr('x1', (d: any) => {\n             return d.source.x; })\n          .attr('y1', (d: any) => {\n            return d.source.y; })\n          .attr('x2', (d: any) => {\n             return d.target.x; })\n          .attr('y2', (d: any) => {\n             return d.target.y; });\n\n      node\n          .attr('cx', (d: any) => {\n             return d.x; })\n          .attr('cy', (d: any) => {\n             return d.y; });\n  }\n\n  function dragstarted(d: any)  {\n      if (!d3.event.active) {\n          simulation.alphaTarget(0.3).restart();\n      }\n      d.fx = d.x;\n      d.fy = d.y;\n  }\n\n  function dragged(d: any)  {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n  }\n\n  function dragended(d: any)  {\n      if (!d3.event.active) {\n          simulation.alphaTarget(0);\n      }\n      d.fx = null;\n      d.fy = null;\n  }\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  const _legendDataSet: Array<O2LegendData> = new Array();\n  for (const i in dataSetJson.groups) {\n      if (dataSetJson.groups.hasOwnProperty(i)) {\n          const _id = dataSetJson.groups[i].id;\n          _legendDataSet.push(new O2LegendData(dataSetJson.groups[i].name, _color(_id)));\n      }\n  }\n  this.buildLegend(cdt, _legendDataSet);\n\n\n\n}\n\n\nprivate buildChoropleth(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildChoropleth -------------------');\n\n  const _maxX = 100; // any value\n  const _maxY = 100; // any value\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n  const _graphCenterPos = cdt.graphCenterPos;\n  const _graphInitX = cdt.graphInitXPos;\n  const _graphInitY = cdt.graphInitYPos;\n\n\n  const _titleDisplay = configData.title.display;\n  const _legendDisplay = configData.legend.display;\n  const _focusColor = configData.color.focusColor;\n\n  const _scale = dataSetJson.map.scale;\n  const _targetName = dataSetJson.map.targetName;\n  const _keyDataName = dataSetJson.map.keyDataName;\n  const _keyName = 'data.' + _keyDataName;\n  const _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;\n  const _startColor = dataSetJson.map.startColor;\n  const _endColor = dataSetJson.map.endColor;\n  const _colorNum = dataSetJson.map.colorNumber;\n  const _center = dataSetJson.map.center;\n  const _targetPropertyName = dataSetJson.map.targetPropertyName;\n  const _targetProperty = 'd.' + _targetPropertyName;\n\n  const color = d3.interpolateHsl(_startColor, _endColor);\n\n  let _max = dataSetJson.data[0].value;\n  let _min = dataSetJson.data[0].value;\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          if (_max < dataSetJson.data[i].value) {\n              _max = dataSetJson.data[i].value;\n          }\n          if (_min > dataSetJson.data[i].value) {\n              _min = dataSetJson.data[i].value;\n          }\n      }\n  }\n  const _range = _max - _min;\n  const _step = _range / (_colorNum - 1);\n\n  const _findColorById = (id: number): string => {\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              if (id === dataSetJson.data[i].id) {\n                  const _value = dataSetJson.data[i].value;\n                  const _rate = Math.ceil((_value - _min) / _step);\n                  return color(_rate / _max);\n              }\n          }\n      }\n  };\n\n  const path = d3.geoPath()\n              .projection(\n                  d3.geoMercator()\n                  .center(_center)\n                  .scale(_scale)\n                  .translate(_graphCenterPos)\n              );\n\n  d3.json(_geoMapDataUrl, (error, data) => {\n      svgContainer.selectAll('path')\n              .data(eval(_keyName))\n              .enter()\n              .append('path')\n              .attr('d', path)\n              .style('fill', (d: any, i: number) =>  {\n                  const _cl = _findColorById(eval(_targetProperty));\n                  return _cl;\n              });\n  });\n\n  // ------------------------------------\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (let i = 0; i < _colorNum; i++) {\n          const _label = String(_min + (i * _step)) +  ' --';\n          _legendDataSet.push(new O2LegendData(_label, color(i / _max)));\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n\n}\n\nprivate buildPackLayout(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in PackLayout------------------');\n\n  const _packlayoutClass = configData.className.packlayout;\n  const _packlayoutLabelClass = configData.className.packlayoutLabel;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n  const color = d3.scaleOrdinal(d3.schemeCategory10);\n  //  const color = d3.scale.category10();\n  const bubble = d3.pack()\n                  .size([svgWidth, svgHeight]);\n\n  const nodes0 = d3.hierarchy(dataSetJson);\n\n  const pack =  svgContainer.selectAll('g')\n              .data(bubble(nodes0).descendants())\n              .enter()\n              .append('g')\n              .attr('transform', (d: any, i: number) =>  {\n                  return 'translate(' + d.x + ',' + d.y + ')';\n              });\n\n  const _circle = pack.append('circle');\n  if (_animation) {\n      _circle.attr('r', 0)\n              .transition()\n              .duration((d: any, i: number) =>  {\n                  return d.depth * _animationDuration  + 500;\n              })\n              .attr('r', (d: any) => {\n                  return d.r;\n              })\n              .style('fill', (d: any, i: any) =>  {\n                  return color(i);\n              });\n  } else {\n      _circle.attr('r', (d: any) => {\n                  return d.r;\n              })\n              .style('fill', (d: any, i: any) =>  {\n                  return color(i);\n              });\n  }\n\n  const _text = pack.append('text')\n              .attr('class', _packlayoutLabelClass)\n              .text((d: any, i: number) =>  {\n                  if (d.depth === 1) {\n                      return d.data.name;\n                  }\n                  return null;\n              });\n\n  if (_animation) {\n      _text.style('opacity', 0)\n          .transition()\n          .duration(_animationDuration)\n          .style('opacity', 1.0);\n  } else {\n      _text.style('opacity', 1.0);\n  }\n\n}\n\nprivate buildTree(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('In  buildTree----------------');\n\n  let _maxX = 0;\n  let _maxY = 0;\n  _maxY = 100;\n  _maxX = 100;\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _color = cdt.defaultColorFunc;\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n  const _graphHeight = cdt.graphHeight;\n  const _graphWidth = cdt.graphWidth;\n\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n  const _treemapClass = configData.className.treemap;\n  const _treemapLabelClass = configData.className.treemapLabel;\n  const _marginLeft = configData.margin.left;\n  const _marginTop = configData.margin.top;\n\n\n  const tree = d3.tree()\n                  .size([_graphWidth, _graphHeight]);\n\n  const nodes0 = d3.hierarchy(dataSetJson);\n\n  const nodes = tree(nodes0);\n\n  const _treeContainer = svgContainer\n    .append('g')\n    .attr('transform',\n      'translate(' + _marginLeft + ',' + _marginTop + ')');\n\n  const link = _treeContainer\n      .selectAll('.link')\n      .data( nodes.descendants().slice(1))\n      .enter()\n      .append('path')\n      .attr('class', 'tree-node-link')\n      .attr('d', (d: any) => {\n          return 'M' + d.x + ',' + d.y\n              + 'C' + d.x + ',' + (d.y + d.parent.y) / 2\n              + ' ' + d.parent.x + ',' +  (d.y + d.parent.y) / 2\n              + ' ' + d.parent.x + ',' + d.parent.y;\n          }\n      );\n\n  const node = _treeContainer\n      .selectAll('.node')\n      .data(nodes.descendants())\n      .enter()\n      .append('g')\n      .attr('class', (d: any) => {\n          return 'tree-node' +\n          (d.children ? '-internal' : '-leaf');\n      })\n      .attr('transform', (d: any) => {\n          return 'translate(' + d.x + ',' + d.y + ')';\n      });\n\n  node.append('circle')\n      .attr('r', 10);\n\n  node.append('text')\n      .attr('dy', '.35em')\n      .attr('y', (d: any) => {\n          return d.children ? -20 : 20;\n      })\n      .style('text-anchor', 'middle')\n      .text((d: any) => {\n          return d.data.name;\n      });\n\n\n}\n\n\n\nprivate buildGeoOrthographic(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildGeoOrthographic -------------------');\n\n  const _maxX = 100; // any value\n  const _maxY = 100; // any value\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n  const _graphCenterPos = cdt.graphCenterPos;\n  const _graphInitX = cdt.graphInitXPos;\n  const _graphInitY = cdt.graphInitYPos;\n\n  const _titleDisplay = configData.title.display;\n  const _legendDisplay = configData.legend.display;\n  const _focusColor = configData.color.focusColor;\n\n  const _geoMapDataUrl = dataSetJson.map.baseGeoDataUrl;\n  const _scale = dataSetJson.map.scale;\n  const _targetName = dataSetJson.map.targetName;\n  const _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;\n  const _keyDataName = dataSetJson.map.keyDataName;\n  const _keyName = 'data.' + _keyDataName;\n  const _clipAngle = dataSetJson.map.clipAngle;\n  const _rotateH   = dataSetJson.map.rotate.horizontal;\n  const _rotateV   = dataSetJson.map.rotate.vertical;\n  const _oceanColor = dataSetJson.map.oceanColor;\n  const _antarcticaColor = dataSetJson.map.antarcticaColor;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n  let _animationH = 0;\n\n  const _findColorByName = (name: string): string => {\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              if (name === dataSetJson.data[i].name) {\n                  const _color = dataSetJson.data[i].color;\n                  return _color;\n              }\n          }\n      }\n      return null;\n  };\n\n  const targetPath = d3.geoOrthographic()\n              .translate(_graphCenterPos)\n              .clipAngle(_clipAngle)\n              .scale(_scale)\n              .rotate([_rotateH, _rotateV]);\n\n  const path = d3.geoPath()\n              .projection(\n                  targetPath\n              );\n\n  d3.json(_geoMapDataUrl, (error, data) => {\n      svgContainer.append('circle')\n          .attr('cx', _graphCenterPos[0])\n          .attr('cy', _graphCenterPos[1])\n          .attr('r', _scale)\n          .style('fill', _oceanColor);\n\n      const earthPath = svgContainer.selectAll('path')\n          .data(eval(_keyName))\n          .enter()\n          .append('path')\n          .attr('d', path)\n          .style('fill', (d: any, i: number) =>  {\n              const _targetArea = eval(_targetProperty);\n              if (_findColorByName(_targetArea) !== null) {\n                  return _findColorByName(_targetArea);\n              }\n\n              return 'hsl(' + i + ',80%,60%)';\n          });\n      if (_animation) {\n          d3.timer(() => {\n              targetPath.rotate([_rotateH + _animationH, _rotateV]);\n              _animationH += 2;\n              earthPath.attr('d', path);\n          });\n      }\n  });\n\n  // ------------------------------------\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              const _name = dataSetJson.data[i].name;\n              const _color = dataSetJson.data[i].color;\n              if (_name === 'Antarctica') {\n                  continue;\n              }\n              _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));\n          }\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n\n\n}\n\n\n\nprivate buildGeoMap(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildGeoMap -------------------');\n\n  const _maxX = 100; // any value\n  const _maxY = 100; // any value\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n  const _graphCenterPos = cdt.graphCenterPos;\n  const _geoMapDataUrl =  dataSetJson.map.baseGeoDataUrl;\n  const _scale = dataSetJson.map.scale;\n  const _keyDataName = dataSetJson.map.keyDataName;\n  const _keyName = 'data.' + _keyDataName;\n  const _targetProperty = 'd.' + dataSetJson.map.targetPropertyName;\n  const _antarcticaColor = dataSetJson.map.antarcticaColor;\n  const _legendDisplay = configData.legend.display;\n\n  const path = d3.geoPath()\n              .projection(\n                  d3.geoMercator()\n                  .translate(_graphCenterPos)\n                  .scale(_scale)\n              );\n\n  const _findColorByName = (name: string): string => {\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              if (name === dataSetJson.data[i].name) {\n                  const _color = dataSetJson.data[i].color;\n                  return _color;\n              }\n          }\n      }\n      return null;\n  };\n\n  d3.json(_geoMapDataUrl, (error, data) => {\n      svgContainer.selectAll('path')\n              .data(eval(_keyName))\n              .enter()\n              .append('path')\n              .attr('d', path)\n              .style('fill', (d: any, i: number) =>  {\n                  const _targetArea = eval(_targetProperty);\n                  if (_findColorByName(_targetArea) !== null) {\n                      return _findColorByName(_targetArea);\n                  }\n                  return 'hsl(' + i + ',80%,60%)';\n              });\n      });\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              const _name = dataSetJson.data[i].name;\n              const _color = dataSetJson.data[i].color;\n              if (_name === 'Antarctica') {\n                  continue;\n              }\n              _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, dataSetJson.data[i].color));\n          }\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n\n}\n\n\n\nprivate buildStackBar(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildStackBar-------------------');\n\n  interface HashString {\n    [index: string]: string;\n  }\n  interface HashNumber {\n    [key: string]: number;\n  }\n\n  const _totalY: Array<number> = new Array();\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n         _totalY.push(0);\n      }\n  }\n\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          let k = 0;\n          for (const j in dataSetJson.data[i].value) {\n              if (dataSetJson.data[i].value.hasOwnProperty(j)) {\n                  _totalY[k++] += dataSetJson.data[i].value[j].y;\n              }\n          }\n      }\n  }\n  let _maxX = 0;\n  let _maxY = 0;\n  _maxY = d3.max(_totalY);\n  _maxX = 100;\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _color = cdt.defaultColorFunc;\n  const _columnNum =  dataSetJson.data.length;\n  const _barWidth = (cdt.graphWidth / _columnNum) - configData.margin.between;\n  const _columnWidth = (cdt.graphWidth / _columnNum) ;\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n  const _graphHeight = cdt.graphHeight;\n  const _maxYValue = cdt.maxYValue;\n\n  const _opacity = configData.color.opacity;\n  const _legendDisplay = configData.legend.display;\n  const _gridYDisplay = configData.grid.y.display;\n  const _gridXDisplay = configData.grid.x.display;\n  const _labelDisplay = configData.label.display;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n\n  //  Get Data Name\n  const _seriesDateName = dataSetJson.series[0];\n\n  //  Get Keys\n  const _keyArray: Array<string> = new Array();\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          const _key = dataSetJson.data[i].name;\n          const _value = dataSetJson.data[i].value[0].y;\n          _keyArray.push(_key);\n      }\n  }\n\n  //  Get Date String\n  const _dateArray: Array<string> = new Array();\n  for (const i in dataSetJson.data[0].value) {\n      if (dataSetJson.data[0].value.hasOwnProperty(i)) {\n          const _xValue = dataSetJson.data[0].value[i].x;\n          _dateArray.push(_xValue);\n      }\n  }\n\n  const _hashArray: Array<any> = new Array();\n  for (const i in _dateArray) {\n      if (_dateArray.hasOwnProperty(i)) {\n          const _dateSt = _dateArray[i];\n          const _hashNumber: HashNumber = { };\n          for (const j in _keyArray) {\n              if (_keyArray.hasOwnProperty(j)) {\n                  const _key = _keyArray[j];\n                  const _value = dataSetJson.data[j].value[i].y;\n                  _hashNumber[_key]  = _value;\n              }\n          }\n          _hashArray.push(_hashNumber);\n      }\n  }\n\n  const yScale = d3.scaleLinear()\n                  .domain([0, _maxYValue])\n                  .range([0, _graphHeight]);\n\n\n  const stack = d3.stack();\n  const _rect = svgContainer.selectAll('g')\n      .data(stack.keys(_keyArray)(_hashArray))\n      .enter()\n      .append('g')\n      .attr('fill', (d: any, i: number) => {\n          return _color(i);\n      } )\n      .attr('fill-opacity', _opacity)\n      .selectAll('rect')\n      .data((d: any, i: number) => {\n          return d;\n      })\n      .enter()\n      .append('rect');\n\n\n\n  if (_animation) {\n      _rect.attr('x', (d: any, i: number) => {\n          return _initPosXã + ãi * _columnWidth;\n      })\n      .attr('height',  0)\n      .attr('y', (d: any, i: number) => {\n          const nm = 'd.data.' + _keyArray[i];\n          const _yValue = eval(nm);\n          return svgHeight - configData.margin.bottom - yScale(d[1]);\n      })\n      .attr('width', _barWidth)\n      .transition()\n      .duration(_animationDuration)\n      .attr('height', (d: any, i: number) => {\n          return yScale(d[1] - d[0]);\n      });\n  } else {\n      _rect.attr('x', (d: any, i: number) => {\n          return _initPosX + (i * _columnWidth);\n      })\n      .attr('y', (d: any, i: number) => {\n          const nm = 'd.data.' + _keyArray[i];\n          const _yValue = eval(nm);\n          return svgHeight - configData.margin.bottom - yScale(d[1]);\n      })\n      .attr('width', _barWidth)\n      .attr('height', (d: any, i: number) => {\n          return yScale(d[1] - d[0]);\n      });\n  }\n\n\n  // ------------------------------------\n  // ---CALL buildTitle-----------------\n  this.drawTitle(cdt);\n\n  // ------------------------------------\n  // ---CALL buildAxis-----------------\n  this.buildYAxis(cdt);\n\n  this.drawXBaseLine(cdt);\n\n  //  ------------------------------------\n  //  ---CALL drawXAxisLabel-----------------\n  if (_labelDisplay) {\n      const _labelArray:  Array<string> = new Array();\n      for (const i in dataSetJson.data[0].value) {\n          if (dataSetJson.data[0].value.hasOwnProperty(i)) {\n              _labelArray.push(dataSetJson.data[0].value[i].x);\n          }\n      }\n      this.drawXAxisLabel(cdt, _labelArray, ChartConst.STACK_BAR_CHART_TYPE_NAME);\n  }\n\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));\n          }\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n\n  if (_gridYDisplay) {\n      this.drawYGrid(cdt);\n  }\n\n}\n\nprivate buildScatterPlot(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('In  buildScatterPlot----------------');\n\n  const _dataSet: Array<O2ScatterPlotData> = new Array();\n  let _maxX = 0;\n  let _maxY = 0;\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          for (const j in dataSetJson.data[i].value) {\n              if (dataSetJson.data[i].value.hasOwnProperty(j)) {\n                  if (_maxX < dataSetJson.data[i].value[j].x) {\n                      _maxX = dataSetJson.data[i].value[j].x;\n                  }\n                  if (_maxY < dataSetJson.data[i].value[j].y) {\n                      _maxY = dataSetJson.data[i].value[j].y;\n                  }\n                  const _scatterPlotData = new O2ScatterPlotData(\n                      dataSetJson.data[i].value[j].x,\n                      dataSetJson.data[i].value[j].y,\n                      dataSetJson.data[i].value[j].r,\n                  ) ;\n                  _dataSet.push(_scatterPlotData);\n              }\n          }\n      }\n  }\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n\n  const _seriesNumber = dataSetJson.series.length;\n  const _color = cdt.defaultColorFunc;\n  const _opacity = configData.color.opacity;\n  const _gridYDisplay = configData.grid.y.display;\n  const _gridXDisplay = configData.grid.x.display;\n  const _titleDisplay = configData.title.display;\n  const _legendDisplay = configData.legend.display;\n\n  const _circle = svgContainer.selectAll('circle')\n          .data(_dataSet)\n          .enter()\n          .append('circle')\n          .attr('cx', (d: O2ScatterPlotData, i: any): number => {\n              return _initPosX + d.x;\n          })\n          .attr('cy', (d: O2ScatterPlotData, i: any): number => {\n              return (svgHeight - configData.margin.bottom - d.y);\n          })\n          .attr('r', (d: O2ScatterPlotData, i: any): number => {\n              return d.r;\n          })\n          .style('fill', (d: any, i: number) =>  {\n              const _colorNum = i % _seriesNumber;\n              return _color(_colorNum);\n          })\n          .attr('fill-opacity',  _opacity);\n\n\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n\n  // ------------------------------------\n  // ---CALL buildLegend-----------------\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (let i = 0; i < dataSetJson.series.length; i++) {\n          _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n  // ------------------------------------\n  // ---CALL buildAxis-----------------\n  this.buildYAxis(cdt);\n\n  this.buildXAxis(cdt);\n\n  if (_gridYDisplay) {\n      this.drawYGrid(cdt);\n  }\n  if (_gridXDisplay) {\n      this.drawXGrid(cdt);\n  }\n}\n\n\n\nprivate drawXGrid(o2Common: any): void {\n\n  console.log('in buildXGrid-------------------');\n\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  const _stepX =  cdt.gridXStep;\n\n  const _maxX = cdt.maxXValue;\n  const _graphYScale = cdt.graphYScale;\n  const _graphXScale = cdt.graphXScale;\n  const _graphWidth = cdt.graphWidth;\n  const _gridClassName = configData.className.grid;\n  const _axisXScale = d3.scaleLinear()\n                  .domain([0, _maxX])\n                  .range([0, _maxX * _graphXScale]);\n  const _rangeX = d3.range(_stepX * _graphXScale,\n                  _maxX  * _graphXScale,\n                  _stepX * _graphXScale);\n\n  svgContainer.append('g')\n      .selectAll('line.x')\n      .data(_rangeX)\n      .enter()\n      .append('line')\n      .attr('class', _gridClassName)\n      .attr('x1', (d: any, i: number) =>  {\n          const _x1 = configData.margin.left  + d;\n          return _x1;\n      })\n      .attr('y1', cdt.svgHeight - configData.margin.bottom)\n      .attr('x2', (d: any, i: number) =>  {\n          const _x2 = configData.margin.left  + d;\n          return _x2;\n      })\n      .attr('y2', configData.margin.top + configData.title.height);\n}\n\nprivate buildXAxis(o2Common: any): void {\n\n  console.log('in buildXAxis-------------------');\n\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  const _maxX = cdt.maxXValue;\n  const _graphXScale = cdt.graphXScale;\n\n  const _axisXScale = d3.scaleLinear()\n                  .domain([0, _maxX])\n                  .range([0, _maxX * _graphXScale]);\n\n  svgContainer.append('g')\n      .attr('class', cdt.axisClassName)\n      .attr('transform', cdt.axisXBorderTranslatePos)\n      .call(\n            d3.axisBottom(_axisXScale)\n      );\n            //  .scale()\n            //  .orient(cdt.axisXOrient)\n            //  );\n}\n\n\n\nprivate buildPie(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('In  buildPie----------------');\n\n  const _maxX = 100;\n  const _maxY = 100;\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _color = cdt.defaultColorFunc;\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n  const _graphHeight = cdt.graphHeight;\n  const _graphWidth = cdt.graphWidth;\n\n  const _opacity = configData.color.opacity;\n  const _titleHeight = configData.title.height;\n  const _leftMargin = configData.margin.left;\n  const _topMargin = configData.margin.top;\n  const _bottomMargin = configData.margin.bottom;\n  const _betweenMargin = configData.margin.between;\n  const _innerRadiusPercent = cdt.innerRadiusPercent;\n  const _graphCenterTranslatePos = cdt.graphCenterTranslatePos;\n  const _pieClassName = configData.className.pie;\n  const _pieValueClassName = configData.className.pieNum;\n  const _pieInnerTitleClassName = configData.className.pieInnerTitle;\n  const _innerRadiusTitleTranslatePos = cdt.innerRadiusTitleTranslatePos;\n  const _innerRadiusTitle = cdt.innerRadiusTitle;\n  const _titleDisplay = configData.title.display;\n  const _legendDisplay = configData.legend.display;\n  const _labelDisplay = configData.label.display;\n  const _valueDisplay = configData.pie.value.display;\n  const _percentDisplay = configData.pie.percent.display;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n\n  const width = svgWidth;\n  const height = svgHeight;\n\n  const dataSet: Array<number> = new Array();\n  for (const i  in  dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          const _num = dataSetJson.data[i].value;\n          dataSet.push(_num);\n      }\n  }\n\n  const _sum = d3.sum(dataSet);\n  const pie = d3.pie();\n  const arc = d3.arc()\n              .innerRadius(_graphHeight * _innerRadiusPercent / 100)\n              .outerRadius(_graphHeight / 2);\n\n  const pieElements = svgContainer.selectAll('path')\n                          .data(pie(dataSet))\n                          .enter()\n                          .append('g')\n                          .attr('transform', _graphCenterTranslatePos);\n\n\n  const _makeCenterTitle = (): string => {\n          if (_valueDisplay && _percentDisplay) {\n              const _st = _innerRadiusTitle + ':' + _sum +  ' (100%)';\n              return _st;\n          }\n          if (_percentDisplay) {\n              return '100%';\n          }\n          if (_valueDisplay) {\n              return _innerRadiusTitle + ':' + _sum;\n          }\n  };\n\n  const textElements = svgContainer.append('text')\n                          .attr('class', _pieInnerTitleClassName)\n                          .attr('transform', _innerRadiusTitleTranslatePos )\n                          .text(_makeCenterTitle);\n\n  const _arc = pieElements.append('path')\n              .attr('class', _pieClassName)\n              .style('fill', (d: any, i: number) =>  {\n                  return _color(i);\n              })\n              .attr('fill-opacity', _opacity);\n\n  //  For d3Version4 animation is not available now\n  //  if (_animation) {\n  //      _arc.transition()\n  //      .duration(_animationDuration)\n  //      .delay((d,i)=> {\n  //          return i *1000;\n  //      })\n  //      .attrTween('d',(d: any,i: number) =>  {\n  //          const _interpolate = d3.interpolateObject(\n  //              { startAngle:d.startAngle,endAngle:d.startAngle }\n  //              { startAngle:d.startAngle,endAngle:d.endAngle }\n  //          )\n  //          return (t) {\n  //              return arc(_interpolate(t));\n  //          }\n  //      })\n  //  }\n  //  else{\n  //      _arc.attr('d',arc);\n  //  }\n  _arc.attr('d', arc);\n\n  pieElements.append('text')\n              .attr('class', _pieValueClassName)\n              .attr('transform', (d: any, i: number) => {\n              return 'translate(' + arc.centroid(d) + ')';\n              })\n              .text((d: any, i: number) => {\n                  if (_valueDisplay && _percentDisplay) {\n                      const _percentSt = String(Math.ceil(d.value / _sum  * 100));\n                      const _st = String(d.value) + ' (' + _percentSt + '%)';\n                      return _st;\n                  }\n                  if (_percentDisplay) {\n                      const _percentSt = String(Math.ceil(d.value / _sum  * 100));\n                      const _st = _percentSt + '%';\n                      return _st;\n                  }\n                  if (_valueDisplay) {\n                      return d.value;\n                  }\n              });\n\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n\n  // ------------------------------------\n  // ---CALL buildLegend-----------------\n  if (_legendDisplay) {\n      const _legendDataSet: Array<O2LegendData> = new Array();\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));\n          }\n      }\n      this.buildLegend(cdt, _legendDataSet);\n  }\n}\n\n\n\nprivate buildBar(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('In  buildBar----------------');\n\n  const _yDataSet: Array<number> = new Array();\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          for (const j in dataSetJson.data[i].y) {\n              if (dataSetJson.data[i].y.hasOwnProperty(j)) {\n                  const _y = dataSetJson.data[i].y[j];\n                  _yDataSet.push(_y);\n              }\n          }\n      }\n  }\n\n  let _maxX = 0;\n  let _maxY = 0;\n  _maxY = d3.max(_yDataSet);\n  _maxX = 100;\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n\n  const _barValueClass = configData.className.barValue;\n  const _color = cdt.defaultColorFunc;\n  const _seriesNum =  dataSetJson.series.length;\n  const _columnNum =  _yDataSet.length;\n  const _initPosX = cdt.graphInitXPos;\n  const _initPosY = cdt.graphInitYPos;\n  const _graphHeight = cdt.graphHeight;\n  const _graphWidth = cdt.graphWidth;\n  const _maxYValue = cdt.maxYValue;\n  const _opacity = configData.color.opacity;\n  const _titleHeight = configData.title.height;\n  const _titleDisplay = configData.title.display;\n  const _leftMargin = configData.margin.left;\n  const _topMargin = configData.margin.top;\n  const _bottomMargin = configData.margin.bottom;\n  const _betweenMargin = configData.margin.between;\n  const _legendDisplay = configData.legend.display;\n  const _labelDisplay = configData.label.display;\n  const _gridYDisplay = configData.grid.y.display;\n  const _animation = configData.animation.enable;\n  const _animationDuration = configData.animation.duration;\n\n  const _barWidth = (_graphWidth - (_betweenMargin * _columnNum / _seriesNum)) /  _columnNum;\n  const _columnWidth = (_graphWidth / _columnNum) ;\n\n  const _graphYScale = cdt.graphYScale;\n\n  const yBarScale = d3.scaleLinear()\n                  .domain([0, _maxY])\n                  .range([_maxY * _graphYScale, 0]);\n\n  const _barPadding = _betweenMargin;\n\n\n\n\n  const grpGraph = svgContainer.selectAll('g')\n      .data(_yDataSet)\n      .enter()\n      .append('g')\n      .attr('transform', (d: any, i: number): string => {\n          const _padding = ((i % _seriesNum) === 0) ? _barPadding : 0;\n          return 'translate(' + (_padding + _columnWidth * i) + ')';\n      })\n      .style('fill', (d: any, i: number) =>  {\n          const _remnant = (i % _seriesNum);\n          return _color(_remnant);\n      })\n      .attr('fill-opacity', _opacity);\n\n  const _rect =  grpGraph.append('rect');\n  if (_animation) {\n      _rect.attr('x', _leftMargin)\n      .attr('height', 0)\n      .attr('y', (d: any): number => {\n          return _initPosY;\n      })\n      .attr('width', _barWidth - _barPadding)\n      .transition()\n      .duration(_animationDuration)\n      .attr('y', (d: any): number => {\n          return yBarScale(d) + _initPosY;\n      })\n      .attr('height', (d: any): number => {\n          return _graphHeight - yBarScale(d) ;\n      });\n  } else {\n      _rect.attr('x', _leftMargin)\n      .attr('y', (d: any): number => {\n          return yBarScale(d) + _initPosY;\n      })\n      .attr('width', _barWidth - _barPadding)\n      .attr('height', (d: any): number => {\n          return _graphHeight - yBarScale(d);\n      });\n  }\n\n  const textBarValue = grpGraph.append('text');\n  textBarValue\n      .attr('class', _barValueClass)\n      .attr('x', _leftMargin)\n      .attr('y', (d: any): number => {\n        return yBarScale(d) + _initPosY;\n      })\n      .text((d: any): string => {\n        return d ;\n      });\n\n  // ------------------------------------\n  // ---CALL buildAxis-----------------\n  this.buildYAxis(cdt);\n\n  //  ------------------------------------\n  //  ---CALL drawXAxisLabel-----------------\n  if (_labelDisplay) {\n      const _labelArray:  Array<string> = new Array();\n      for (const i in dataSetJson.data) {\n          if (dataSetJson.data.hasOwnProperty(i)) {\n              _labelArray.push(dataSetJson.data[i].x);\n          }\n      }\n      this.drawXAxisLabel(cdt, _labelArray, ChartConst.BAR_CHART_TYPE_NAME);\n  }\n\n  this.drawXBaseLine(cdt);\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  const _legendDataSet: Array<O2LegendData> = new Array();\n  for (const i in dataSetJson.series) {\n      if (dataSetJson.series.hasOwnProperty(i)) {\n        _legendDataSet.push(new O2LegendData(dataSetJson.series[i], _color(i)));\n      }\n  }\n  this.buildLegend(cdt, _legendDataSet);\n\n  // ------------------------------------\n  // ---CALL buildTitle-----------------\n  if (_titleDisplay) {\n      this.drawTitle(cdt);\n  }\n\n  if (_gridYDisplay) {\n      this.drawYGrid(cdt);\n  }\n\n}\n\n\nprivate buildLine(svgContainer: any, configData: any, dataSetJson: any, svgWidth: number, svgHeight: number): void {\n\n  console.log('in buildTest-------------------');\n\n  const _groupMaxY: Array<number> = new Array();\n\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          let _gMaxY = 0;\n          for (const j in dataSetJson.data[i].value) {\n              if (dataSetJson.data[i].value.hasOwnProperty(j)) {\n                  if (_gMaxY < dataSetJson.data[i].value[j].y) {\n                      _gMaxY = dataSetJson.data[i].value[j].y;\n                  }\n              }\n          }\n          _groupMaxY.push(_gMaxY) ;\n      }\n  }\n  let _maxX = 0;\n  let _maxY = 0;\n  _maxY = d3.max(_groupMaxY);\n  _maxX = 100;\n\n  const cdt = new O2Common(svgContainer, configData, _maxX, _maxY, svgWidth, svgHeight);\n  const _color = cdt.defaultColorFunc;\n\n  const _columnNum = dataSetJson.data[0].value.length ;\n  const _columnWidth = cdt.graphWidth / _columnNum;\n\n  console.log(_columnWidth);\n\n  if (configData.grid.y.display) {\n      this.drawYGrid(cdt);\n  }\n\n  //  O2IdValueData\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n          const _lineArray: Array<O2IdValueData> = new Array();\n          for (const j in dataSetJson.data[i].value) {\n              if (dataSetJson.data[i].value.hasOwnProperty(j)) {\n                  const idValue = new O2IdValueData(parseInt(j, 10), dataSetJson.data[i].value[j].y);\n                  _lineArray.push(idValue);\n              }\n          }\n          const num = parseInt(i, 10);\n          this.drawSingleLine(cdt, _lineArray, num);\n      }\n  }\n\n  // ------------------------------------\n  // ---CALL buildTitle-----------------\n  this.drawTitle(cdt);\n\n  // ------------------------------------\n  // ---CALL buildAxis-----------------\n  this.buildYAxis(cdt);\n\n  this.drawXBaseLine(cdt);\n\n  //  ------------------------------------\n  //  ---CALL drawXAxisLabel-----------------\n  const _labelArray:  Array<string> = new Array();\n  for (const i in dataSetJson.data[0].value) {\n      if (dataSetJson.data[0].value.hasOwnProperty(i)) {\n          _labelArray.push(dataSetJson.data[0].value[i].x);\n      }\n  }\n  this.drawXAxisLabel(cdt, _labelArray, ChartConst.LINE_CHART_TYPE_NAME);\n\n  //  ------------------------------------\n  //  ---CALL buildLegend-----------------\n  const _legendDataSet: Array<O2LegendData> = new Array();\n  for (const i in dataSetJson.data) {\n      if (dataSetJson.data.hasOwnProperty(i)) {\n        _legendDataSet.push(new O2LegendData(dataSetJson.data[i].name, _color(i)));\n      }\n  }\n  this.buildLegend(cdt, _legendDataSet);\n\n}\n\n\n\n\nprivate drawSingleLine(o2Common: any, dataSet: any, lineNum: number): void {\n\n  console.log('in drawSingleLine-------------------');\n\n  console.log(dataSet);\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  const _maxX = cdt.maxXValue;\n  const _initXPos = cdt.axisXLabelInitXPos;\n  const _initYPos = cdt.axisXLabelInitYPos;\n  const _columnNum = dataSet.length;\n  const _columnWidth = cdt.graphWidth / (_columnNum - 1);\n  const _color = d3.scaleOrdinal(d3.schemeCategory10);\n\n  const _lineClassName = configData.className.multiLinePrefix + String(lineNum);\n  const _leftMargin = configData.margin.left;\n  const _bottomMargin = configData.margin.bottom;\n\n  const _yScale = cdt.graphYScale;\n\n\n  const line = d3.line()\n      .curve(d3.curveLinear)\n      .x( (d: any) => {\n          return _leftMargin + d.id * _columnWidth;\n      })\n      .y( (d: any) => {\n          return cdt.svgHeight - _bottomMargin - ( d.value * _yScale) ;\n      });\n\n  svgContainer.append('path')\n          .attr('class', _lineClassName)\n          .attr('d', line(dataSet));\n          //  .attr('transform', cdt.axisTranslatePos)\n}\n\n\n// ------------------------------------\n// ---Build Legend  -------------------\n// ------------------------------------\nprivate buildLegend(o2Common: any, _legendDataSet: any): void {\n\n  console.log('in buildLegend-------------------');\n\n  //  maxValues are meaningless\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n  //  const cdt = new O2Common(configData, 100, 100, svgWidth, svgHeight);\n  const legendRectSize = configData.legend.rectWidth;\n  const legendSpacing = 10;\n  const ySpacing = configData.legend.ySpacing;\n  const initPosX = cdt.legendInitXPos;\n  const initPosY = cdt.legendInitYPos;\n  const opacity = configData.color.opacity;\n\n  const grpLegend = svgContainer.append('g')\n              .selectAll('g')\n              .data(_legendDataSet)\n              .enter()\n              .append('g')\n              .attr('class', 'legend')\n              .attr('transform', (d: O2LegendData, i: number) => {\n                  const height = legendRectSize + ySpacing;\n                  const x = initPosX;\n                  const y = i * height + initPosY ;\n                  return 'translate(' + x + ', ' + y + ')';\n              });\n\n  grpLegend.append('rect')\n      .attr('width', legendRectSize)\n      .attr('height', legendRectSize)\n      .style('fill', (d: O2LegendData) => {\n          return d.color;\n      })\n      .style('stroke', (d: O2LegendData) => {\n          return d.color;\n      })\n      .attr('fill-opacity', opacity);\n\n  grpLegend.append('text')\n      .attr('x', legendRectSize + legendSpacing)\n      .attr('y', legendRectSize)\n      .text((d: O2LegendData) => {\n          return d.title;\n      });\n}\n\n\nprivate drawXAxisLabel(o2Common: any, labelDataSet: any, chartType: string): void {\n\n  console.log('in drawXAxisLabel-------------------');\n\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  // const _maxX = cdt.maxXValue;\n  const _initXPos = cdt.axisXLabelInitXPos;\n  const _initYPos = cdt.axisXLabelInitYPos;\n\n  const _columnNum = labelDataSet.length;\n  let _columnWidth = cdt.graphWidth / _columnNum;\n  if ( chartType === ChartConst.LINE_CHART_TYPE_NAME) {\n      _columnWidth = cdt.graphWidth / (_columnNum - 1);\n  }\n\n  const grpLabel = svgContainer.append('g')\n              .selectAll('g')\n              .data(labelDataSet)\n              .enter()\n              .append('g')\n              .attr('class', configData.axisXText)\n              .attr('transform', (d: any, i: number) => {\n                  const _x = _initXPos + _columnWidth * i;\n                  const _y = _initYPos ;\n                  return 'translate(' + _x + ', ' + _y + ')';\n              });\n\n  grpLabel.append('text')\n              .attr('class', configData.className.axisXText)\n              .text((d: any, i: number) => {\n                  return d;\n              });\n\n\n}\n\n\nprivate drawXBaseLine(o2Common: any): void {\n\n  console.log('in drawXBaseLine-------------------');\n\n  const cdt = o2Common;\n  const svgContainer = cdt.svgContainer;\n\n  svgContainer.append('rect')\n      .attr('class', cdt.axisXBorderLineClassName)\n      .attr('width', cdt.axisXBorderWidth)\n      .attr('height', cdt.axisXBorderLineWidth)\n      .attr('transform', cdt.axisXBorderTranslatePos);\n\n}\n\n\n// ------------------------------------\n// ---Build Axis  -------------------\n// ------------------------------------\nprivate buildYAxis(o2Common: any): void {\n\n  console.log('in buildYAxis-------------------');\n\n  const cdt = o2Common;\n  const svgContainer = cdt.svgContainer;\n\n  const _maxY = cdt.maxYValue;\n  const _graphYScale = cdt.graphYScale;\n\n  const _axisYScale = d3.scaleLinear()\n                  .domain([0, _maxY])\n                  .range([_maxY * _graphYScale, 0]);\n\n  svgContainer.append('g')\n      .attr('class', cdt.axisClassName)\n      .attr('transform', cdt.axisTranslatePos)\n      .call(\n            d3.axisLeft(_axisYScale)\n            );\n\n}\n\n\n// ------------------------------------\n// --- drawTitle-----------------\nprivate drawTitle(o2Common: any): void {\n\n  console.log('in drawTitle-------------------');\n\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  const _title = configData.title.name;\n  const _xPos = cdt.titleInitXPos;\n  const _yPos = cdt.titleInitYPos;\n  const _titleClassName = configData.title.className;\n\n  svgContainer.append('text')\n      .attr('class', _titleClassName)\n      .attr('x', _xPos)\n      .attr('y', _yPos)\n      .text(_title);\n}\n\n\n// ------------------------------------\n// ---drawGrid  -------------------\n// ------------------------------------\nprivate drawYGrid(o2Common: any): void {\n\n  console.log('in buildYGrid-------------------');\n\n  const cdt = o2Common;\n  const configData = cdt.configData;\n  const svgContainer = cdt.svgContainer;\n\n  const _stepY =  cdt.gridYStep;\n  const _maxY = cdt.maxYValue;\n  const _graphYScale = cdt.graphYScale;\n  const _gridClassName = configData.className.grid;\n  const _rangeY = d3.range(_stepY * _graphYScale,\n                  _maxY * _graphYScale,\n                  _stepY * _graphYScale);\n\n  svgContainer.append('g')\n      .selectAll('line.y')\n      .data(_rangeY)\n      .enter()\n      .append('line')\n      .attr('class', _gridClassName)\n      .attr('x1', configData.margin.left)\n      .attr('y1', ( d: any, i: number ) =>  {\n          const _y1 = cdt.svgHeight - configData.margin.bottom - d;\n          return _y1;\n      })\n      .attr('x2', configData.margin.left + cdt.axisXBorderWidth)\n      .attr('y2', ( d: any, i: number ) =>  {\n          const _y1 = cdt.svgHeight - configData.margin.bottom - d;\n          return _y1;\n      });\n  }\n}","import { NgModule } from '@angular/core';\nimport { Ng6O2ChartComponent } from './ng6-o2-chart.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [Ng6O2ChartComponent],\n  exports: [Ng6O2ChartComponent]\n})\nexport class Ng6O2ChartModule { }\n"]}